{"id":"fa4eec3e4803b88dc38f758797dd6cf4","_format":"hh-sol-build-info-1","solcVersion":"0.8.4","solcLongVersion":"0.8.4+commit.c7e474f2","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"},"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"contracts/lottery.sol":{"content":"//Raffle\r\n\r\n//enter lottry (paying some amount)\r\n//Pick a random number (verifiable)\r\n//completly automatic random number generates for winner\r\n//chinlink oracle -> randonmes, automated excution (Chainlink keeper)\r\n\r\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\";\r\n\r\n\r\n\r\n\r\n\r\nerror notEnoughFee();\r\nerror Raffle__notOpen(); \r\nerror upKeepnotNeeded();\r\n\r\ncontract lottery is VRFConsumerBaseV2 , AutomationCompatibleInterface  {\r\n   \r\n    enum LotteryState{\r\n        OPEN,\r\n        CALCULATING\r\n    }\r\n    \r\n    \r\n    uint256 private immutable i_entrance;//entrance fee\r\n    //array to store players\r\n    address payable[] private s_players; //we have made players payable because we have to give them money when they win \r\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\r\n    bytes32 private immutable i_gaslane;\r\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\r\n    uint32 private immutable i_callbackgaslimit;\r\n    uint32 private constant Num_words = 1;\r\n    uint64 private immutable i_subscriptionId;\r\n    //keep track of state using enum\r\n\r\n    //lottery variables\r\n    address private s_recentWinner;\r\n    LotteryState private s_lotteryState;\r\n    uint256 private s_lastTImeStamp;\r\n    uint256 private immutable i_interval;\r\n    \r\n    \r\n    \r\n    //events\r\n    event LotteryEnter(address indexed player);\r\n    event RequestLotteryWinner(uint256 indexed requestId);\r\n    event winnerPicked(address indexed winner);\r\n    //contructor called each time contract is deployed (mostly once)\r\n    constructor(uint256 interval ,uint32 callbackgaslimit,uint64 subscriptionId,bytes32 gaslane,address vrfCoordinatorV2,uint256 entranceFee) VRFConsumerBaseV2(vrfCoordinatorV2) {\r\n        i_entrance = entranceFee;  \r\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\r\n        i_gaslane = gaslane;\r\n        i_subscriptionId = subscriptionId;\r\n        s_lotteryState = LotteryState.OPEN; //0 means open\r\n        i_callbackgaslimit = callbackgaslimit;\r\n        s_lastTImeStamp =  block.timestamp;\r\n        i_interval = interval;\r\n    }   \r\n\r\n    //function for the user to enter in the lottery\r\n    function enterLottery() public  payable{  \r\n        //while entering the lottery if somehow user fails to add value greater than entrance value error will be thrown\r\n        if(msg.value < i_entrance) {revert notEnoughFee();}\r\n        if(s_lotteryState != LotteryState.OPEN ){revert Raffle__notOpen(); }\r\n        s_players.push(payable(msg.sender));\r\n    \r\n    }\r\n\r\n    //function to get the player at given index \r\n    function getPlayer(uint256 index) public view returns(address){\r\n        return s_players[index];\r\n    }\r\n\r\n     /**\r\n     * @dev This is the function that the Chainlink Keeper nodes call\r\n     * they look for `upkeepNeeded` to return True.\r\n     * the following should be true for this to return true:\r\n     * 1. The time interval has passed between raffle runs.\r\n     * 2. The lottery is open.\r\n     * 3. The contract has ETH.\r\n     * 4. Implicity, your subscription is funded with LINK.\r\n     */\r\n    function checkUpkeep(\r\n        bytes memory /* checkData */\r\n    )\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            bool upkeepNeeded,\r\n            bytes memory /* performData */\r\n        )\r\n    {\r\n        bool isOpen = LotteryState.OPEN == s_lotteryState;\r\n        bool timePassed = ((block.timestamp - s_lastTImeStamp) > i_interval);\r\n        bool hasPlayers = s_players.length > 0;\r\n        bool hasBalance = address(this).balance > 0;\r\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\r\n        return (upkeepNeeded, \"0x0\"); // can we comment this out?\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //external is cheaper\r\n    function performUpkeep(bytes calldata /*performData*/ )  external override {\r\n        //request random number and then do something to it, it involves two transactions and it is preffered\r\n      \r\n      (bool upKeepNeeded,) = checkUpkeep(\"\");\r\n\r\n      if(!upKeepNeeded){ revert upKeepnotNeeded();}\r\n      \r\n      s_lotteryState = LotteryState.CALCULATING;\r\n      uint256 requestId =  i_vrfCoordinator.requestRandomWords(\r\n            i_gaslane,\r\n            i_subscriptionId,\r\n            REQUEST_CONFIRMATIONS,\r\n            i_callbackgaslimit,\r\n            Num_words\r\n               );\r\n            \r\n        emit RequestLotteryWinner(requestId);\r\n    }\r\n\r\n    function fulfillRandomWords(uint256 ,uint256[] memory randomwords) internal override {\r\n        uint256 indexOfWinner = randomwords[0] % s_players.length;\r\n        address payable winner = s_players[indexOfWinner];\r\n        s_recentWinner = winner;\r\n        s_lastTImeStamp = block.timestamp;\r\n        s_lotteryState = LotteryState.OPEN;\r\n        s_players = new address payable[](0);\r\n         (bool success, ) = winner.call{value: address(this).balance}(\"\");\r\n         if(!success){\r\n            revert notEnoughFee();\r\n         }\r\n        emit winnerPicked(winner);\r\n    }\r\n\r\n    function getRecentWinner() public view returns (address){\r\n        return s_recentWinner;\r\n    }\r\n\r\n    function getEntranceFee() public view returns (uint256){\r\n        return i_entrance;\r\n    }\r\n\r\n    function getLotteryState() public view returns(LotteryState){\r\n    \r\n       return s_lotteryState;\r\n    }\r\n\r\n    function getNumOfPlayers() public view returns(uint256){\r\n        return s_players.length;\r\n    }\r\n\r\n    function getInterval() public view returns(uint256){\r\n        return i_interval;\r\n    }\r\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol","exportedSymbols":{"AutomationBase":[29]},"id":30,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":29,"linearizedBaseContracts":[29],"name":"AutomationBase","nameLocation":"66:14:0","nodeType":"ContractDefinition","nodes":[{"id":3,"name":"OnlySimulatedBackend","nameLocation":"91:20:0","nodeType":"ErrorDefinition","parameters":{"id":2,"nodeType":"ParameterList","parameters":[],"src":"111:2:0"},"src":"85:29:0"},{"body":{"id":19,"nodeType":"Block","src":"290:83:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":13,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"300:2:0","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":8,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"origin","nodeType":"MemberAccess","src":"300:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":11,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"321:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":10,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"313:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"313:7:0","typeDescriptions":{}}},"id":12,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"313:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"300:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":18,"nodeType":"IfStatement","src":"296:73:0","trueBody":{"id":17,"nodeType":"Block","src":"325:44:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":14,"name":"OnlySimulatedBackend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"340:20:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":15,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"340:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":16,"nodeType":"RevertStatement","src":"333:29:0"}]}}]},"documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"118:127:0","text":" @notice method that allows it to be simulated via eth_call by checking that\n the sender is the zero address."},"id":20,"implemented":true,"kind":"function","modifiers":[],"name":"preventExecution","nameLocation":"257:16:0","nodeType":"FunctionDefinition","parameters":{"id":5,"nodeType":"ParameterList","parameters":[],"src":"273:2:0"},"returnParameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"290:0:0"},"scope":29,"src":"248:125:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":27,"nodeType":"Block","src":"534:36:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":23,"name":"preventExecution","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"540:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"540:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":25,"nodeType":"ExpressionStatement","src":"540:18:0"},{"id":26,"nodeType":"PlaceholderStatement","src":"564:1:0"}]},"documentation":{"id":21,"nodeType":"StructuredDocumentation","src":"377:129:0","text":" @notice modifier that allows it to be simulated via eth_call by checking\n that the sender is the zero address."},"id":28,"name":"cannotExecute","nameLocation":"518:13:0","nodeType":"ModifierDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"531:2:0"},"src":"509:61:0","virtual":false,"visibility":"internal"}],"scope":30,"src":"57:515:0","usedErrors":[3]}],"src":"32:541:0"},"id":0},"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol","exportedSymbols":{"AutomationBase":[29],"AutomationCompatible":[38],"AutomationCompatibleInterface":[57]},"id":39,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":31,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol","file":"./AutomationBase.sol","id":32,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":39,"sourceUnit":30,"src":"57:30:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol","file":"./interfaces/AutomationCompatibleInterface.sol","id":33,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":39,"sourceUnit":58,"src":"88:56:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":34,"name":"AutomationBase","nodeType":"IdentifierPath","referencedDeclaration":29,"src":"188:14:1"},"id":35,"nodeType":"InheritanceSpecifier","src":"188:14:1"},{"baseName":{"id":36,"name":"AutomationCompatibleInterface","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"204:29:1"},"id":37,"nodeType":"InheritanceSpecifier","src":"204:29:1"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":38,"linearizedBaseContracts":[38,57,29],"name":"AutomationCompatible","nameLocation":"164:20:1","nodeType":"ContractDefinition","nodes":[],"scope":39,"src":"146:90:1","usedErrors":[3]}],"src":"32:205:1"},"id":1},"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol","exportedSymbols":{"AutomationCompatibleInterface":[57]},"id":58,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":40,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"AutomationCompatibleInterface","nameLocation":"67:29:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"101:985:2","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":50,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1098:11:2","nodeType":"FunctionDefinition","parameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"checkData","nameLocation":"1125:9:2","nodeType":"VariableDeclaration","scope":50,"src":"1110:24:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":42,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1109:26:2"},"returnParameters":{"id":49,"nodeType":"ParameterList","parameters":[{"constant":false,"id":46,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1159:12:2","nodeType":"VariableDeclaration","scope":50,"src":"1154:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":45,"name":"bool","nodeType":"ElementaryTypeName","src":"1154:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":48,"mutability":"mutable","name":"performData","nameLocation":"1186:11:2","nodeType":"VariableDeclaration","scope":50,"src":"1173:24:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":47,"name":"bytes","nodeType":"ElementaryTypeName","src":"1173:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1153:45:2"},"scope":57,"src":"1089:110:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1203:1003:2","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":56,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2218:13:2","nodeType":"FunctionDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"performData","nameLocation":"2247:11:2","nodeType":"VariableDeclaration","scope":56,"src":"2232:26:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":52,"name":"bytes","nodeType":"ElementaryTypeName","src":"2232:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2231:28:2"},"returnParameters":{"id":55,"nodeType":"ParameterList","parameters":[],"src":"2268:0:2"},"scope":57,"src":"2209:60:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":58,"src":"57:2214:2","usedErrors":[]}],"src":"32:2240:2"},"id":2},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[153]},"id":154,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":153,"linearizedBaseContracts":[153],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"97:267:3","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":70,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:3","nodeType":"FunctionDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[],"src":"392:2:3"},"returnParameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"418:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":62,"name":"uint16","nodeType":"ElementaryTypeName","src":"418:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"426:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":64,"name":"uint32","nodeType":"ElementaryTypeName","src":"426:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":68,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"434:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":66,"name":"bytes32","nodeType":"ElementaryTypeName","src":"434:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":67,"nodeType":"ArrayTypeName","src":"434:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"417:34:3"},"scope":153,"src":"367:85:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":71,"nodeType":"StructuredDocumentation","src":"456:1511:3","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":86,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"1979:18:3","nodeType":"FunctionDefinition","parameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":73,"mutability":"mutable","name":"keyHash","nameLocation":"2011:7:3","nodeType":"VariableDeclaration","scope":86,"src":"2003:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":72,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2003:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":75,"mutability":"mutable","name":"subId","nameLocation":"2031:5:3","nodeType":"VariableDeclaration","scope":86,"src":"2024:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":74,"name":"uint64","nodeType":"ElementaryTypeName","src":"2024:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":77,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2049:27:3","nodeType":"VariableDeclaration","scope":86,"src":"2042:34:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":76,"name":"uint16","nodeType":"ElementaryTypeName","src":"2042:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2089:16:3","nodeType":"VariableDeclaration","scope":86,"src":"2082:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":78,"name":"uint32","nodeType":"ElementaryTypeName","src":"2082:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":81,"mutability":"mutable","name":"numWords","nameLocation":"2118:8:3","nodeType":"VariableDeclaration","scope":86,"src":"2111:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":80,"name":"uint32","nodeType":"ElementaryTypeName","src":"2111:6:3","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1997:133:3"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"requestId","nameLocation":"2157:9:3","nodeType":"VariableDeclaration","scope":86,"src":"2149:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":83,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2148:19:3"},"scope":153,"src":"1970:198:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":87,"nodeType":"StructuredDocumentation","src":"2172:384:3","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":92,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2568:18:3","nodeType":"FunctionDefinition","parameters":{"id":88,"nodeType":"ParameterList","parameters":[],"src":"2586:2:3"},"returnParameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"mutability":"mutable","name":"subId","nameLocation":"2614:5:3","nodeType":"VariableDeclaration","scope":92,"src":"2607:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":89,"name":"uint64","nodeType":"ElementaryTypeName","src":"2607:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2606:14:3"},"scope":153,"src":"2559:62:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"2625:381:3","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":107,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3018:15:3","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"subId","nameLocation":"3046:5:3","nodeType":"VariableDeclaration","scope":107,"src":"3039:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":94,"name":"uint64","nodeType":"ElementaryTypeName","src":"3039:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3033:22:3"},"returnParameters":{"id":106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"balance","nameLocation":"3086:7:3","nodeType":"VariableDeclaration","scope":107,"src":"3079:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":97,"name":"uint96","nodeType":"ElementaryTypeName","src":"3079:6:3","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"reqCount","nameLocation":"3102:8:3","nodeType":"VariableDeclaration","scope":107,"src":"3095:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":99,"name":"uint64","nodeType":"ElementaryTypeName","src":"3095:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"owner","nameLocation":"3120:5:3","nodeType":"VariableDeclaration","scope":107,"src":"3112:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"3112:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":105,"mutability":"mutable","name":"consumers","nameLocation":"3144:9:3","nodeType":"VariableDeclaration","scope":107,"src":"3127:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"3127:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ArrayTypeName","src":"3127:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3078:76:3"},"scope":153,"src":"3009:146:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3159:164:3","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":115,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3335:32:3","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"subId","nameLocation":"3375:5:3","nodeType":"VariableDeclaration","scope":115,"src":"3368:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":109,"name":"uint64","nodeType":"ElementaryTypeName","src":"3368:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"newOwner","nameLocation":"3390:8:3","nodeType":"VariableDeclaration","scope":115,"src":"3382:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"3382:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3367:32:3"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"3408:0:3"},"scope":153,"src":"3326:83:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"3413:212:3","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":121,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3637:31:3","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"subId","nameLocation":"3676:5:3","nodeType":"VariableDeclaration","scope":121,"src":"3669:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":117,"name":"uint64","nodeType":"ElementaryTypeName","src":"3669:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3668:14:3"},"returnParameters":{"id":120,"nodeType":"ParameterList","parameters":[],"src":"3691:0:3"},"scope":153,"src":"3628:64:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"3696:170:3","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":129,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3878:11:3","nodeType":"FunctionDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"subId","nameLocation":"3897:5:3","nodeType":"VariableDeclaration","scope":129,"src":"3890:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":123,"name":"uint64","nodeType":"ElementaryTypeName","src":"3890:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":126,"mutability":"mutable","name":"consumer","nameLocation":"3912:8:3","nodeType":"VariableDeclaration","scope":129,"src":"3904:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3889:32:3"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[],"src":"3930:0:3"},"scope":153,"src":"3869:62:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":130,"nodeType":"StructuredDocumentation","src":"3935:172:3","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":137,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4119:14:3","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"mutability":"mutable","name":"subId","nameLocation":"4141:5:3","nodeType":"VariableDeclaration","scope":137,"src":"4134:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":131,"name":"uint64","nodeType":"ElementaryTypeName","src":"4134:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"consumer","nameLocation":"4156:8:3","nodeType":"VariableDeclaration","scope":137,"src":"4148:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"4148:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4133:32:3"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"4174:0:3"},"scope":153,"src":"4110:65:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":138,"nodeType":"StructuredDocumentation","src":"4179:140:3","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":145,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4331:18:3","nodeType":"FunctionDefinition","parameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":140,"mutability":"mutable","name":"subId","nameLocation":"4357:5:3","nodeType":"VariableDeclaration","scope":145,"src":"4350:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":139,"name":"uint64","nodeType":"ElementaryTypeName","src":"4350:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":142,"mutability":"mutable","name":"to","nameLocation":"4372:2:3","nodeType":"VariableDeclaration","scope":145,"src":"4364:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":141,"name":"address","nodeType":"ElementaryTypeName","src":"4364:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4349:26:3"},"returnParameters":{"id":144,"nodeType":"ParameterList","parameters":[],"src":"4384:0:3"},"scope":153,"src":"4322:63:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":152,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4690:20:3","nodeType":"FunctionDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"subId","nameLocation":"4718:5:3","nodeType":"VariableDeclaration","scope":152,"src":"4711:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":146,"name":"uint64","nodeType":"ElementaryTypeName","src":"4711:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4710:14:3"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":152,"src":"4748:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":149,"name":"bool","nodeType":"ElementaryTypeName","src":"4748:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4747:6:3"},"scope":153,"src":"4681:73:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":154,"src":"57:4699:3","usedErrors":[]}],"src":"32:4725:3"},"id":3},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[211]},"id":212,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":155,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:4"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":156,"nodeType":"StructuredDocumentation","src":"57:5275:4","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":211,"linearizedBaseContracts":[211],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:4","nodeType":"ContractDefinition","nodes":[{"id":162,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:4","nodeType":"ErrorDefinition","parameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":158,"mutability":"mutable","name":"have","nameLocation":"5413:4:4","nodeType":"VariableDeclaration","scope":162,"src":"5405:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":157,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":160,"mutability":"mutable","name":"want","nameLocation":"5427:4:4","nodeType":"VariableDeclaration","scope":162,"src":"5419:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":159,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:4"},"src":"5373:60:4"},{"constant":false,"id":164,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:4","nodeType":"VariableDeclaration","scope":211,"src":"5436:40:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":174,"nodeType":"Block","src":"5593:43:4","statements":[{"expression":{"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":170,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"5599:14:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":171,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"5616:15:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":173,"nodeType":"ExpressionStatement","src":"5599:32:4"}]},"documentation":{"id":165,"nodeType":"StructuredDocumentation","src":"5481:72:4","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":175,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:4","nodeType":"VariableDeclaration","scope":175,"src":"5568:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:4"},"returnParameters":{"id":169,"nodeType":"ParameterList","parameters":[],"src":"5593:0:4"},"scope":211,"src":"5556:80:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"5640:686:4","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":184,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:4","nodeType":"FunctionDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":178,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:4","nodeType":"VariableDeclaration","scope":184,"src":"6357:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":177,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":181,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:4","nodeType":"VariableDeclaration","scope":184,"src":"6376:28:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":179,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":180,"nodeType":"ArrayTypeName","src":"6376:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:4"},"returnParameters":{"id":183,"nodeType":"ParameterList","parameters":[],"src":"6422:0:4"},"scope":211,"src":"6329:94:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":209,"nodeType":"Block","src":"6707:167:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":192,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6717:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":194,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"6731:14:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":203,"nodeType":"IfStatement","src":"6713:109:4","trueBody":{"id":202,"nodeType":"Block","src":"6747:75:4","statements":[{"errorCall":{"arguments":[{"expression":{"id":197,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6788:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":199,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"6800:14:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":196,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"6762:25:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6762:53:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":201,"nodeType":"RevertStatement","src":"6755:60:4"}]}},{"expression":{"arguments":[{"id":205,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"6846:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":206,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"6857:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":204,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"6827:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6827:42:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":208,"nodeType":"ExpressionStatement","src":"6827:42:4"}]},"functionSelector":"1fe543e3","id":210,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:4","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":186,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:4","nodeType":"VariableDeclaration","scope":210,"src":"6649:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":185,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:4","nodeType":"VariableDeclaration","scope":210,"src":"6668:28:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":187,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":188,"nodeType":"ArrayTypeName","src":"6668:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:4"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"6707:0:4"},"scope":211,"src":"6618:256:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":212,"src":"5333:1543:4","usedErrors":[162]}],"src":"32:6845:4"},"id":4},"contracts/lottery.sol":{"ast":{"absolutePath":"contracts/lottery.sol","exportedSymbols":{"AutomationBase":[29],"AutomationCompatible":[38],"AutomationCompatibleInterface":[57],"Raffle__notOpen":[220],"VRFConsumerBaseV2":[211],"VRFCoordinatorV2Interface":[153],"lottery":[585],"notEnoughFee":[218],"upKeepnotNeeded":[222]},"id":586,"license":"SEE LICENSE IN LICENSE","nodeType":"SourceUnit","nodes":[{"id":213,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"269:23:5"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":214,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":586,"sourceUnit":154,"src":"296:80:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","id":215,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":586,"sourceUnit":212,"src":"378:65:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol","file":"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol","id":216,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":586,"sourceUnit":39,"src":"445:75:5","symbolAliases":[],"unitAlias":""},{"id":218,"name":"notEnoughFee","nameLocation":"538:12:5","nodeType":"ErrorDefinition","parameters":{"id":217,"nodeType":"ParameterList","parameters":[],"src":"550:2:5"},"src":"532:21:5"},{"id":220,"name":"Raffle__notOpen","nameLocation":"561:15:5","nodeType":"ErrorDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[],"src":"576:2:5"},"src":"555:24:5"},{"id":222,"name":"upKeepnotNeeded","nameLocation":"588:15:5","nodeType":"ErrorDefinition","parameters":{"id":221,"nodeType":"ParameterList","parameters":[],"src":"603:2:5"},"src":"582:24:5"},{"abstract":false,"baseContracts":[{"baseName":{"id":223,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":211,"src":"630:17:5"},"id":224,"nodeType":"InheritanceSpecifier","src":"630:17:5"},{"baseName":{"id":225,"name":"AutomationCompatibleInterface","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"650:29:5"},"id":226,"nodeType":"InheritanceSpecifier","src":"650:29:5"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":585,"linearizedBaseContracts":[585,57,211],"name":"lottery","nameLocation":"619:7:5","nodeType":"ContractDefinition","nodes":[{"canonicalName":"lottery.LotteryState","id":229,"members":[{"id":227,"name":"OPEN","nameLocation":"721:4:5","nodeType":"EnumValue","src":"721:4:5"},{"id":228,"name":"CALCULATING","nameLocation":"736:11:5","nodeType":"EnumValue","src":"736:11:5"}],"name":"LotteryState","nameLocation":"698:12:5","nodeType":"EnumDefinition","src":"693:61:5"},{"constant":false,"id":231,"mutability":"immutable","name":"i_entrance","nameLocation":"798:10:5","nodeType":"VariableDeclaration","scope":585,"src":"772:36:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":230,"name":"uint256","nodeType":"ElementaryTypeName","src":"772:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":234,"mutability":"mutable","name":"s_players","nameLocation":"885:9:5","nodeType":"VariableDeclaration","scope":585,"src":"859:35:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"859:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":233,"nodeType":"ArrayTypeName","src":"859:17:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"constant":false,"id":237,"mutability":"immutable","name":"i_vrfCoordinator","nameLocation":"1026:16:5","nodeType":"VariableDeclaration","scope":585,"src":"982:60:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":236,"nodeType":"UserDefinedTypeName","pathNode":{"id":235,"name":"VRFCoordinatorV2Interface","nodeType":"IdentifierPath","referencedDeclaration":153,"src":"982:25:5"},"referencedDeclaration":153,"src":"982:25:5","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":239,"mutability":"immutable","name":"i_gaslane","nameLocation":"1075:9:5","nodeType":"VariableDeclaration","scope":585,"src":"1049:35:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":238,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1049:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"id":242,"mutability":"constant","name":"REQUEST_CONFIRMATIONS","nameLocation":"1115:21:5","nodeType":"VariableDeclaration","scope":585,"src":"1091:49:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":240,"name":"uint16","nodeType":"ElementaryTypeName","src":"1091:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1139:1:5","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":false,"id":244,"mutability":"immutable","name":"i_callbackgaslimit","nameLocation":"1172:18:5","nodeType":"VariableDeclaration","scope":585,"src":"1147:43:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":243,"name":"uint32","nodeType":"ElementaryTypeName","src":"1147:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":247,"mutability":"constant","name":"Num_words","nameLocation":"1221:9:5","nodeType":"VariableDeclaration","scope":585,"src":"1197:37:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":245,"name":"uint32","nodeType":"ElementaryTypeName","src":"1197:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":false,"id":249,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"1266:16:5","nodeType":"VariableDeclaration","scope":585,"src":"1241:41:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":248,"name":"uint64","nodeType":"ElementaryTypeName","src":"1241:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":251,"mutability":"mutable","name":"s_recentWinner","nameLocation":"1370:14:5","nodeType":"VariableDeclaration","scope":585,"src":"1354:30:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":250,"name":"address","nodeType":"ElementaryTypeName","src":"1354:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":254,"mutability":"mutable","name":"s_lotteryState","nameLocation":"1412:14:5","nodeType":"VariableDeclaration","scope":585,"src":"1391:35:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"},"typeName":{"id":253,"nodeType":"UserDefinedTypeName","pathNode":{"id":252,"name":"LotteryState","nodeType":"IdentifierPath","referencedDeclaration":229,"src":"1391:12:5"},"referencedDeclaration":229,"src":"1391:12:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"visibility":"private"},{"constant":false,"id":256,"mutability":"mutable","name":"s_lastTImeStamp","nameLocation":"1449:15:5","nodeType":"VariableDeclaration","scope":585,"src":"1433:31:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":255,"name":"uint256","nodeType":"ElementaryTypeName","src":"1433:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":258,"mutability":"immutable","name":"i_interval","nameLocation":"1497:10:5","nodeType":"VariableDeclaration","scope":585,"src":"1471:36:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":257,"name":"uint256","nodeType":"ElementaryTypeName","src":"1471:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"anonymous":false,"id":262,"name":"LotteryEnter","nameLocation":"1552:12:5","nodeType":"EventDefinition","parameters":{"id":261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":260,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"1581:6:5","nodeType":"VariableDeclaration","scope":262,"src":"1565:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":259,"name":"address","nodeType":"ElementaryTypeName","src":"1565:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1564:24:5"},"src":"1546:43:5"},{"anonymous":false,"id":266,"name":"RequestLotteryWinner","nameLocation":"1601:20:5","nodeType":"EventDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"1638:9:5","nodeType":"VariableDeclaration","scope":266,"src":"1622:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":263,"name":"uint256","nodeType":"ElementaryTypeName","src":"1622:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1621:27:5"},"src":"1595:54:5"},{"anonymous":false,"id":270,"name":"winnerPicked","nameLocation":"1661:12:5","nodeType":"EventDefinition","parameters":{"id":269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":268,"indexed":true,"mutability":"mutable","name":"winner","nameLocation":"1690:6:5","nodeType":"VariableDeclaration","scope":270,"src":"1674:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":267,"name":"address","nodeType":"ElementaryTypeName","src":"1674:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1673:24:5"},"src":"1655:43:5"},{"body":{"id":324,"nodeType":"Block","src":"1948:377:5","statements":[{"expression":{"id":290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":288,"name":"i_entrance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"1959:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":289,"name":"entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"1972:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1959:24:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":291,"nodeType":"ExpressionStatement","src":"1959:24:5"},{"expression":{"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":292,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"1996:16:5","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":294,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"2041:16:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":293,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":153,"src":"2015:25:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$153_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2015:43:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"src":"1996:62:5","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"id":297,"nodeType":"ExpressionStatement","src":"1996:62:5"},{"expression":{"id":300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":298,"name":"i_gaslane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"2069:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":299,"name":"gaslane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"2081:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2069:19:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":301,"nodeType":"ExpressionStatement","src":"2069:19:5"},{"expression":{"id":304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":302,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"2099:16:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":303,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"2118:14:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2099:33:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":305,"nodeType":"ExpressionStatement","src":"2099:33:5"},{"expression":{"id":309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":306,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"2143:14:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":307,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"2160:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$229_$","typeString":"type(enum lottery.LotteryState)"}},"id":308,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":227,"src":"2160:17:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"src":"2143:34:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"id":310,"nodeType":"ExpressionStatement","src":"2143:34:5"},{"expression":{"id":313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":311,"name":"i_callbackgaslimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"2203:18:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":312,"name":"callbackgaslimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"2224:16:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2203:37:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":314,"nodeType":"ExpressionStatement","src":"2203:37:5"},{"expression":{"id":318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":315,"name":"s_lastTImeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"2251:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":316,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2270:5:5","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"2270:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2251:34:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":319,"nodeType":"ExpressionStatement","src":"2251:34:5"},{"expression":{"id":322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":320,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"2296:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":321,"name":"interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"2309:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2296:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":323,"nodeType":"ExpressionStatement","src":"2296:21:5"}]},"id":325,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":285,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"1930:16:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":286,"kind":"baseConstructorSpecifier","modifierName":{"id":284,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":211,"src":"1912:17:5"},"nodeType":"ModifierInvocation","src":"1912:35:5"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":272,"mutability":"mutable","name":"interval","nameLocation":"1794:8:5","nodeType":"VariableDeclaration","scope":325,"src":"1786:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":271,"name":"uint256","nodeType":"ElementaryTypeName","src":"1786:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":274,"mutability":"mutable","name":"callbackgaslimit","nameLocation":"1811:16:5","nodeType":"VariableDeclaration","scope":325,"src":"1804:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":273,"name":"uint32","nodeType":"ElementaryTypeName","src":"1804:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":276,"mutability":"mutable","name":"subscriptionId","nameLocation":"1835:14:5","nodeType":"VariableDeclaration","scope":325,"src":"1828:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":275,"name":"uint64","nodeType":"ElementaryTypeName","src":"1828:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":278,"mutability":"mutable","name":"gaslane","nameLocation":"1858:7:5","nodeType":"VariableDeclaration","scope":325,"src":"1850:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":277,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1850:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":280,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"1874:16:5","nodeType":"VariableDeclaration","scope":325,"src":"1866:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":279,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":282,"mutability":"mutable","name":"entranceFee","nameLocation":"1899:11:5","nodeType":"VariableDeclaration","scope":325,"src":"1891:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":281,"name":"uint256","nodeType":"ElementaryTypeName","src":"1891:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1785:126:5"},"returnParameters":{"id":287,"nodeType":"ParameterList","parameters":[],"src":"1948:0:5"},"scope":585,"src":"1774:551:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":356,"nodeType":"Block","src":"2428:323:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":328,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2566:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2566:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":330,"name":"i_entrance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2578:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2566:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":336,"nodeType":"IfStatement","src":"2563:51:5","trueBody":{"id":335,"nodeType":"Block","src":"2590:24:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":332,"name":"notEnoughFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"2598:12:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2598:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":334,"nodeType":"RevertStatement","src":"2591:21:5"}]}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":337,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"2627:14:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":338,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"2645:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$229_$","typeString":"type(enum lottery.LotteryState)"}},"id":339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":227,"src":"2645:17:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"src":"2627:35:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":345,"nodeType":"IfStatement","src":"2624:68:5","trueBody":{"id":344,"nodeType":"Block","src":"2664:28:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":341,"name":"Raffle__notOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"2672:15:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2672:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":343,"nodeType":"RevertStatement","src":"2665:24:5"}]}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":351,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2725:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2725:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:8:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"2717:8:5","stateMutability":"payable","typeDescriptions":{}}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2717:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":346,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"2702:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"2702:14:5","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$bound_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2702:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":355,"nodeType":"ExpressionStatement","src":"2702:35:5"}]},"functionSelector":"c1af5785","id":357,"implemented":true,"kind":"function","modifiers":[],"name":"enterLottery","nameLocation":"2398:12:5","nodeType":"FunctionDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[],"src":"2410:2:5"},"returnParameters":{"id":327,"nodeType":"ParameterList","parameters":[],"src":"2428:0:5"},"scope":585,"src":"2389:362:5","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":368,"nodeType":"Block","src":"2871:42:5","statements":[{"expression":{"baseExpression":{"id":364,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"2889:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":366,"indexExpression":{"id":365,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"2899:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2889:16:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":363,"id":367,"nodeType":"Return","src":"2882:23:5"}]},"functionSelector":"e55ae4e8","id":369,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayer","nameLocation":"2818:9:5","nodeType":"FunctionDefinition","parameters":{"id":360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":359,"mutability":"mutable","name":"index","nameLocation":"2836:5:5","nodeType":"VariableDeclaration","scope":369,"src":"2828:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":358,"name":"uint256","nodeType":"ElementaryTypeName","src":"2828:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2827:15:5"},"returnParameters":{"id":363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":362,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":369,"src":"2863:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":361,"name":"address","nodeType":"ElementaryTypeName","src":"2863:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2862:9:5"},"scope":585,"src":"2809:104:5","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[50],"body":{"id":430,"nodeType":"Block","src":"3539:393:5","statements":[{"assignments":[381],"declarations":[{"constant":false,"id":381,"mutability":"mutable","name":"isOpen","nameLocation":"3555:6:5","nodeType":"VariableDeclaration","scope":430,"src":"3550:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":380,"name":"bool","nodeType":"ElementaryTypeName","src":"3550:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":386,"initialValue":{"commonType":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":382,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"3564:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$229_$","typeString":"type(enum lottery.LotteryState)"}},"id":383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":227,"src":"3564:17:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":384,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3585:14:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"src":"3564:35:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3550:49:5"},{"assignments":[388],"declarations":[{"constant":false,"id":388,"mutability":"mutable","name":"timePassed","nameLocation":"3615:10:5","nodeType":"VariableDeclaration","scope":430,"src":"3610:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":387,"name":"bool","nodeType":"ElementaryTypeName","src":"3610:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":397,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":389,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3630:5:5","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"3630:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":391,"name":"s_lastTImeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3648:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3630:33:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":393,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3629:35:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":394,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3667:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3629:48:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":396,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3628:50:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3610:68:5"},{"assignments":[399],"declarations":[{"constant":false,"id":399,"mutability":"mutable","name":"hasPlayers","nameLocation":"3694:10:5","nodeType":"VariableDeclaration","scope":430,"src":"3689:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":398,"name":"bool","nodeType":"ElementaryTypeName","src":"3689:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":404,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":400,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"3707:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3707:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3726:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3707:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3689:38:5"},{"assignments":[406],"declarations":[{"constant":false,"id":406,"mutability":"mutable","name":"hasBalance","nameLocation":"3743:10:5","nodeType":"VariableDeclaration","scope":430,"src":"3738:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":405,"name":"bool","nodeType":"ElementaryTypeName","src":"3738:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":414,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":409,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3764:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_lottery_$585","typeString":"contract lottery"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_lottery_$585","typeString":"contract lottery"}],"id":408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3756:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":407,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:5","typeDescriptions":{}}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3756:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"3756:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3780:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3756:25:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3738:43:5"},{"expression":{"id":424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":415,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"3792:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":416,"name":"timePassed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"3808:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":417,"name":"isOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"3822:6:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3808:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":419,"name":"hasBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"3832:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3808:34:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":421,"name":"hasPlayers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"3846:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3808:48:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":423,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3807:50:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3792:65:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":425,"nodeType":"ExpressionStatement","src":"3792:65:5"},{"expression":{"components":[{"id":426,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"3876:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"307830","id":427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3890:5:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_77b7d82d931e1a403db0240b08c0716665eec4664af617c457918e4a67bc1810","typeString":"literal_string \"0x0\""},"value":"0x0"}],"id":428,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3875:21:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_stringliteral_77b7d82d931e1a403db0240b08c0716665eec4664af617c457918e4a67bc1810_$","typeString":"tuple(bool,literal_string \"0x0\")"}},"functionReturnParameters":379,"id":429,"nodeType":"Return","src":"3868:28:5"}]},"documentation":{"id":370,"nodeType":"StructuredDocumentation","src":"2922:385:5","text":" @dev This is the function that the Chainlink Keeper nodes call\n they look for `upkeepNeeded` to return True.\n the following should be true for this to return true:\n 1. The time interval has passed between raffle runs.\n 2. The lottery is open.\n 3. The contract has ETH.\n 4. Implicity, your subscription is funded with LINK."},"functionSelector":"6e04ff0d","id":431,"implemented":true,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"3322:11:5","nodeType":"FunctionDefinition","overrides":{"id":374,"nodeType":"OverrideSpecifier","overrides":[],"src":"3419:8:5"},"parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":431,"src":"3344:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":371,"name":"bytes","nodeType":"ElementaryTypeName","src":"3344:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3333:46:5"},"returnParameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"3465:12:5","nodeType":"VariableDeclaration","scope":431,"src":"3460:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":375,"name":"bool","nodeType":"ElementaryTypeName","src":"3460:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":378,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":431,"src":"3492:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":377,"name":"bytes","nodeType":"ElementaryTypeName","src":"3492:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3445:88:5"},"scope":585,"src":"3313:619:5","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[56],"body":{"id":470,"nodeType":"Block","src":"4052:579:5","statements":[{"assignments":[438,null],"declarations":[{"constant":false,"id":438,"mutability":"mutable","name":"upKeepNeeded","nameLocation":"4186:12:5","nodeType":"VariableDeclaration","scope":470,"src":"4181:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":437,"name":"bool","nodeType":"ElementaryTypeName","src":"4181:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":442,"initialValue":{"arguments":[{"hexValue":"","id":440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4215:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":439,"name":"checkUpkeep","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"4203:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4203:15:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4180:38:5"},{"condition":{"id":444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4232:13:5","subExpression":{"id":443,"name":"upKeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"4233:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":449,"nodeType":"IfStatement","src":"4229:45:5","trueBody":{"id":448,"nodeType":"Block","src":"4246:28:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":445,"name":"upKeepnotNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"4255:15:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4255:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":447,"nodeType":"RevertStatement","src":"4248:24:5"}]}},{"expression":{"id":453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":450,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"4290:14:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":451,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"4307:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$229_$","typeString":"type(enum lottery.LotteryState)"}},"id":452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"CALCULATING","nodeType":"MemberAccess","referencedDeclaration":228,"src":"4307:24:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"src":"4290:41:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"id":454,"nodeType":"ExpressionStatement","src":"4290:41:5"},{"assignments":[456],"declarations":[{"constant":false,"id":456,"mutability":"mutable","name":"requestId","nameLocation":"4348:9:5","nodeType":"VariableDeclaration","scope":470,"src":"4340:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":455,"name":"uint256","nodeType":"ElementaryTypeName","src":"4340:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":465,"initialValue":{"arguments":[{"id":459,"name":"i_gaslane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4411:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":460,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"4435:16:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":461,"name":"REQUEST_CONFIRMATIONS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"4466:21:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":462,"name":"i_callbackgaslimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"4502:18:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":463,"name":"Num_words","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"4535:9:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":457,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"4361:16:5","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":86,"src":"4361:35:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4361:201:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4340:222:5"},{"eventCall":{"arguments":[{"id":467,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":456,"src":"4613:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":466,"name":"RequestLotteryWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"4592:20:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4592:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":469,"nodeType":"EmitStatement","src":"4587:36:5"}]},"functionSelector":"4585e33b","id":471,"implemented":true,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"3986:13:5","nodeType":"FunctionDefinition","overrides":{"id":435,"nodeType":"OverrideSpecifier","overrides":[],"src":"4043:8:5"},"parameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":471,"src":"4000:14:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":432,"name":"bytes","nodeType":"ElementaryTypeName","src":"4000:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3999:33:5"},"returnParameters":{"id":436,"nodeType":"ParameterList","parameters":[],"src":"4052:0:5"},"scope":585,"src":"3977:654:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[184],"body":{"id":541,"nodeType":"Block","src":"4724:490:5","statements":[{"assignments":[481],"declarations":[{"constant":false,"id":481,"mutability":"mutable","name":"indexOfWinner","nameLocation":"4743:13:5","nodeType":"VariableDeclaration","scope":541,"src":"4735:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":480,"name":"uint256","nodeType":"ElementaryTypeName","src":"4735:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":488,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":482,"name":"randomwords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"4759:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":484,"indexExpression":{"hexValue":"30","id":483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4771:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4759:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":485,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"4776:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4776:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4759:33:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4735:57:5"},{"assignments":[490],"declarations":[{"constant":false,"id":490,"mutability":"mutable","name":"winner","nameLocation":"4819:6:5","nodeType":"VariableDeclaration","scope":541,"src":"4803:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":489,"name":"address","nodeType":"ElementaryTypeName","src":"4803:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":494,"initialValue":{"baseExpression":{"id":491,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"4828:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":493,"indexExpression":{"id":492,"name":"indexOfWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"4838:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4828:24:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"4803:49:5"},{"expression":{"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":495,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"4863:14:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":496,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"4880:6:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4863:23:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":498,"nodeType":"ExpressionStatement","src":"4863:23:5"},{"expression":{"id":502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":499,"name":"s_lastTImeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"4897:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":500,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4915:5:5","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"4915:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4897:33:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":503,"nodeType":"ExpressionStatement","src":"4897:33:5"},{"expression":{"id":507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":504,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"4941:14:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":505,"name":"LotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"4958:12:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_LotteryState_$229_$","typeString":"type(enum lottery.LotteryState)"}},"id":506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":227,"src":"4958:17:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"src":"4941:34:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"id":508,"nodeType":"ExpressionStatement","src":"4941:34:5"},{"expression":{"id":515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":509,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"4986:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5020:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4998:21:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_payable_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address payable[] memory)"},"typeName":{"baseType":{"id":510,"name":"address","nodeType":"ElementaryTypeName","src":"5002:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":511,"nodeType":"ArrayTypeName","src":"5002:17:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}}},"id":514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4998:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_memory_ptr","typeString":"address payable[] memory"}},"src":"4986:36:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":516,"nodeType":"ExpressionStatement","src":"4986:36:5"},{"assignments":[518,null],"declarations":[{"constant":false,"id":518,"mutability":"mutable","name":"success","nameLocation":"5040:7:5","nodeType":"VariableDeclaration","scope":541,"src":"5035:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":517,"name":"bool","nodeType":"ElementaryTypeName","src":"5035:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":529,"initialValue":{"arguments":[{"hexValue":"","id":527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5095:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":519,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"5053:6:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5053:11:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":523,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5080:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_lottery_$585","typeString":"contract lottery"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_lottery_$585","typeString":"contract lottery"}],"id":522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5072:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":521,"name":"address","nodeType":"ElementaryTypeName","src":"5072:7:5","typeDescriptions":{}}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5072:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5072:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5053:41:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5053:45:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5034:64:5"},{"condition":{"id":531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5113:8:5","subExpression":{"id":530,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"5114:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":536,"nodeType":"IfStatement","src":"5110:61:5","trueBody":{"id":535,"nodeType":"Block","src":"5122:49:5","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":532,"name":"notEnoughFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"5144:12:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5144:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":534,"nodeType":"RevertStatement","src":"5137:21:5"}]}},{"eventCall":{"arguments":[{"id":538,"name":"winner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"5199:6:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":537,"name":"winnerPicked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"5186:12:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5186:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":540,"nodeType":"EmitStatement","src":"5181:25:5"}]},"id":542,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"4648:18:5","nodeType":"FunctionDefinition","overrides":{"id":478,"nodeType":"OverrideSpecifier","overrides":[],"src":"4715:8:5"},"parameters":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":542,"src":"4667:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":472,"name":"uint256","nodeType":"ElementaryTypeName","src":"4667:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":476,"mutability":"mutable","name":"randomwords","nameLocation":"4693:11:5","nodeType":"VariableDeclaration","scope":542,"src":"4676:28:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":474,"name":"uint256","nodeType":"ElementaryTypeName","src":"4676:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":475,"nodeType":"ArrayTypeName","src":"4676:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4666:39:5"},"returnParameters":{"id":479,"nodeType":"ParameterList","parameters":[],"src":"4724:0:5"},"scope":585,"src":"4639:575:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":549,"nodeType":"Block","src":"5278:40:5","statements":[{"expression":{"id":547,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"5296:14:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":546,"id":548,"nodeType":"Return","src":"5289:21:5"}]},"functionSelector":"473f1ddc","id":550,"implemented":true,"kind":"function","modifiers":[],"name":"getRecentWinner","nameLocation":"5231:15:5","nodeType":"FunctionDefinition","parameters":{"id":543,"nodeType":"ParameterList","parameters":[],"src":"5246:2:5"},"returnParameters":{"id":546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":545,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":550,"src":"5270:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":544,"name":"address","nodeType":"ElementaryTypeName","src":"5270:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5269:9:5"},"scope":585,"src":"5222:96:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":557,"nodeType":"Block","src":"5381:36:5","statements":[{"expression":{"id":555,"name":"i_entrance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"5399:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":554,"id":556,"nodeType":"Return","src":"5392:17:5"}]},"functionSelector":"09bc33a7","id":558,"implemented":true,"kind":"function","modifiers":[],"name":"getEntranceFee","nameLocation":"5335:14:5","nodeType":"FunctionDefinition","parameters":{"id":551,"nodeType":"ParameterList","parameters":[],"src":"5349:2:5"},"returnParameters":{"id":554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":558,"src":"5373:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":552,"name":"uint256","nodeType":"ElementaryTypeName","src":"5373:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5372:9:5"},"scope":585,"src":"5326:91:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":566,"nodeType":"Block","src":"5485:45:5","statements":[{"expression":{"id":564,"name":"s_lotteryState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"5508:14:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"functionReturnParameters":563,"id":565,"nodeType":"Return","src":"5501:21:5"}]},"functionSelector":"6b68c03c","id":567,"implemented":true,"kind":"function","modifiers":[],"name":"getLotteryState","nameLocation":"5434:15:5","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[],"src":"5449:2:5"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":567,"src":"5472:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"},"typeName":{"id":561,"nodeType":"UserDefinedTypeName","pathNode":{"id":560,"name":"LotteryState","nodeType":"IdentifierPath","referencedDeclaration":229,"src":"5472:12:5"},"referencedDeclaration":229,"src":"5472:12:5","typeDescriptions":{"typeIdentifier":"t_enum$_LotteryState_$229","typeString":"enum lottery.LotteryState"}},"visibility":"internal"}],"src":"5471:14:5"},"scope":585,"src":"5425:105:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":575,"nodeType":"Block","src":"5593:42:5","statements":[{"expression":{"expression":{"id":572,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"5611:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5611:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":571,"id":574,"nodeType":"Return","src":"5604:23:5"}]},"functionSelector":"565429de","id":576,"implemented":true,"kind":"function","modifiers":[],"name":"getNumOfPlayers","nameLocation":"5547:15:5","nodeType":"FunctionDefinition","parameters":{"id":568,"nodeType":"ParameterList","parameters":[],"src":"5562:2:5"},"returnParameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":576,"src":"5585:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":569,"name":"uint256","nodeType":"ElementaryTypeName","src":"5585:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5584:9:5"},"scope":585,"src":"5538:97:5","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":583,"nodeType":"Block","src":"5694:36:5","statements":[{"expression":{"id":581,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"5712:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":580,"id":582,"nodeType":"Return","src":"5705:17:5"}]},"functionSelector":"91ad27b4","id":584,"implemented":true,"kind":"function","modifiers":[],"name":"getInterval","nameLocation":"5652:11:5","nodeType":"FunctionDefinition","parameters":{"id":577,"nodeType":"ParameterList","parameters":[],"src":"5663:2:5"},"returnParameters":{"id":580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":584,"src":"5686:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":578,"name":"uint256","nodeType":"ElementaryTypeName","src":"5686:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5685:9:5"},"scope":585,"src":"5643:87:5","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":586,"src":"610:5123:5","usedErrors":[162,218,220,222]}],"src":"269:5464:5"},"id":5}},"contracts":{"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol":{"AutomationBase":{"abi":[{"inputs":[],"name":"OnlySimulatedBackend","type":"error"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220ec9737d2c35f734986b48f8c0ce4ba2ea2fe3d68c65e5776fcbaaac65ce6627964736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEC SWAP8 CALLDATACOPY 0xD2 0xC3 0x5F PUSH20 0x4986B48F8C0CE4BA2EA2FE3D68C65E5776FCBAAA 0xC6 0x5C 0xE6 PUSH3 0x796473 PUSH16 0x6C634300080400330000000000000000 ","sourceMap":"57:515:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220ec9737d2c35f734986b48f8c0ce4ba2ea2fe3d68c65e5776fcbaaac65ce6627964736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEC SWAP8 CALLDATACOPY 0xD2 0xC3 0x5F PUSH20 0x4986B48F8C0CE4BA2EA2FE3D68C65E5776FCBAAA 0xC6 0x5C 0xE6 PUSH3 0x796473 PUSH16 0x6C634300080400330000000000000000 ","sourceMap":"57:515:0:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"},"internal":{"preventExecution()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":\"AutomationBase\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol":{"AutomationCompatible":{"abi":[{"inputs":[],"name":"OnlySimulatedBackend","type":"error"},{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":\"AutomationCompatible\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol":{"AutomationCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"contracts/lottery.sol":{"lottery":{"abi":[{"inputs":[{"internalType":"uint256","name":"interval","type":"uint256"},{"internalType":"uint32","name":"callbackgaslimit","type":"uint32"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"bytes32","name":"gaslane","type":"bytes32"},{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint256","name":"entranceFee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"Raffle__notOpen","type":"error"},{"inputs":[],"name":"notEnoughFee","type":"error"},{"inputs":[],"name":"upKeepnotNeeded","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"LotteryEnter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"}],"name":"RequestLotteryWinner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"winner","type":"address"}],"name":"winnerPicked","type":"event"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"enterLottery","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getEntranceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getInterval","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLotteryState","outputs":[{"internalType":"enum lottery.LotteryState","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNumOfPlayers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getPlayer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRecentWinner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK."}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3056:6","statements":[{"body":{"nodeType":"YulBlock","src":"70:80:6","statements":[{"nodeType":"YulAssignment","src":"80:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"89:5:6"},"nodeType":"YulFunctionCall","src":"89:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"80:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"138:5:6"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"111:26:6"},"nodeType":"YulFunctionCall","src":"111:33:6"},"nodeType":"YulExpressionStatement","src":"111:33:6"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"48:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"56:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:6","type":""}],"src":"7:143:6"},{"body":{"nodeType":"YulBlock","src":"219:80:6","statements":[{"nodeType":"YulAssignment","src":"229:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"244:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"238:5:6"},"nodeType":"YulFunctionCall","src":"238:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"229:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"287:5:6"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"260:26:6"},"nodeType":"YulFunctionCall","src":"260:33:6"},"nodeType":"YulExpressionStatement","src":"260:33:6"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"197:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"205:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"213:5:6","type":""}],"src":"156:143:6"},{"body":{"nodeType":"YulBlock","src":"368:80:6","statements":[{"nodeType":"YulAssignment","src":"378:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"393:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"387:5:6"},"nodeType":"YulFunctionCall","src":"387:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"378:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"436:5:6"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"409:26:6"},"nodeType":"YulFunctionCall","src":"409:33:6"},"nodeType":"YulExpressionStatement","src":"409:33:6"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"346:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"354:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"362:5:6","type":""}],"src":"305:143:6"},{"body":{"nodeType":"YulBlock","src":"516:79:6","statements":[{"nodeType":"YulAssignment","src":"526:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"541:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"535:5:6"},"nodeType":"YulFunctionCall","src":"535:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"526:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"583:5:6"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"557:25:6"},"nodeType":"YulFunctionCall","src":"557:32:6"},"nodeType":"YulExpressionStatement","src":"557:32:6"}]},"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"494:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"502:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"510:5:6","type":""}],"src":"454:141:6"},{"body":{"nodeType":"YulBlock","src":"663:79:6","statements":[{"nodeType":"YulAssignment","src":"673:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"688:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"682:5:6"},"nodeType":"YulFunctionCall","src":"682:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"673:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"730:5:6"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"704:25:6"},"nodeType":"YulFunctionCall","src":"704:32:6"},"nodeType":"YulExpressionStatement","src":"704:32:6"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"641:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"649:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"657:5:6","type":""}],"src":"601:141:6"},{"body":{"nodeType":"YulBlock","src":"908:903:6","statements":[{"body":{"nodeType":"YulBlock","src":"955:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"964:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"967:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"957:6:6"},"nodeType":"YulFunctionCall","src":"957:12:6"},"nodeType":"YulExpressionStatement","src":"957:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"929:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"938:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"925:3:6"},"nodeType":"YulFunctionCall","src":"925:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"950:3:6","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"921:3:6"},"nodeType":"YulFunctionCall","src":"921:33:6"},"nodeType":"YulIf","src":"918:2:6"},{"nodeType":"YulBlock","src":"981:128:6","statements":[{"nodeType":"YulVariableDeclaration","src":"996:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1010:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1000:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1025:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1071:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1082:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1067:3:6"},"nodeType":"YulFunctionCall","src":"1067:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1091:7:6"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1035:31:6"},"nodeType":"YulFunctionCall","src":"1035:64:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1025:6:6"}]}]},{"nodeType":"YulBlock","src":"1119:128:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1134:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1148:2:6","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1138:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1164:73:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1209:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1220:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1205:3:6"},"nodeType":"YulFunctionCall","src":"1205:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1229:7:6"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"1174:30:6"},"nodeType":"YulFunctionCall","src":"1174:63:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1164:6:6"}]}]},{"nodeType":"YulBlock","src":"1257:128:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1272:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1286:2:6","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1276:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1302:73:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1347:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1358:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1343:3:6"},"nodeType":"YulFunctionCall","src":"1343:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1367:7:6"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"1312:30:6"},"nodeType":"YulFunctionCall","src":"1312:63:6"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1302:6:6"}]}]},{"nodeType":"YulBlock","src":"1395:129:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1410:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1424:2:6","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1414:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1440:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1486:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1497:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1482:3:6"},"nodeType":"YulFunctionCall","src":"1482:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1506:7:6"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"1450:31:6"},"nodeType":"YulFunctionCall","src":"1450:64:6"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1440:6:6"}]}]},{"nodeType":"YulBlock","src":"1534:130:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1549:17:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1563:3:6","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1553:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1580:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1626:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1637:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1622:3:6"},"nodeType":"YulFunctionCall","src":"1622:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1646:7:6"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1590:31:6"},"nodeType":"YulFunctionCall","src":"1590:64:6"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1580:6:6"}]}]},{"nodeType":"YulBlock","src":"1674:130:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1689:17:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1703:3:6","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1693:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1720:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1766:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1777:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1762:3:6"},"nodeType":"YulFunctionCall","src":"1762:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1786:7:6"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1730:31:6"},"nodeType":"YulFunctionCall","src":"1730:64:6"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1720:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint32t_uint64t_bytes32t_addresst_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"838:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"849:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"861:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"869:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"877:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"885:6:6","type":""},{"name":"value4","nodeType":"YulTypedName","src":"893:6:6","type":""},{"name":"value5","nodeType":"YulTypedName","src":"901:6:6","type":""}],"src":"748:1063:6"},{"body":{"nodeType":"YulBlock","src":"1862:51:6","statements":[{"nodeType":"YulAssignment","src":"1872:35:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1901:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1883:17:6"},"nodeType":"YulFunctionCall","src":"1883:24:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1872:7:6"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1844:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1854:7:6","type":""}],"src":"1817:96:6"},{"body":{"nodeType":"YulBlock","src":"1964:32:6","statements":[{"nodeType":"YulAssignment","src":"1974:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"1985:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1974:7:6"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1946:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1956:7:6","type":""}],"src":"1919:77:6"},{"body":{"nodeType":"YulBlock","src":"2047:81:6","statements":[{"nodeType":"YulAssignment","src":"2057:65:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2072:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"2079:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2068:3:6"},"nodeType":"YulFunctionCall","src":"2068:54:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2057:7:6"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2029:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2039:7:6","type":""}],"src":"2002:126:6"},{"body":{"nodeType":"YulBlock","src":"2179:32:6","statements":[{"nodeType":"YulAssignment","src":"2189:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"2200:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2189:7:6"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2161:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2171:7:6","type":""}],"src":"2134:77:6"},{"body":{"nodeType":"YulBlock","src":"2261:49:6","statements":[{"nodeType":"YulAssignment","src":"2271:33:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2286:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"2293:10:6","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2282:3:6"},"nodeType":"YulFunctionCall","src":"2282:22:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2271:7:6"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2243:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2253:7:6","type":""}],"src":"2217:93:6"},{"body":{"nodeType":"YulBlock","src":"2360:57:6","statements":[{"nodeType":"YulAssignment","src":"2370:41:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2385:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"2392:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2381:3:6"},"nodeType":"YulFunctionCall","src":"2381:30:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2370:7:6"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2342:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2352:7:6","type":""}],"src":"2316:101:6"},{"body":{"nodeType":"YulBlock","src":"2466:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"2523:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2532:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2535:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2525:6:6"},"nodeType":"YulFunctionCall","src":"2525:12:6"},"nodeType":"YulExpressionStatement","src":"2525:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2489:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2514:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2496:17:6"},"nodeType":"YulFunctionCall","src":"2496:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2486:2:6"},"nodeType":"YulFunctionCall","src":"2486:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2479:6:6"},"nodeType":"YulFunctionCall","src":"2479:43:6"},"nodeType":"YulIf","src":"2476:2:6"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2459:5:6","type":""}],"src":"2423:122:6"},{"body":{"nodeType":"YulBlock","src":"2594:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"2651:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2660:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2663:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2653:6:6"},"nodeType":"YulFunctionCall","src":"2653:12:6"},"nodeType":"YulExpressionStatement","src":"2653:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2617:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2642:5:6"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2624:17:6"},"nodeType":"YulFunctionCall","src":"2624:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2614:2:6"},"nodeType":"YulFunctionCall","src":"2614:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2607:6:6"},"nodeType":"YulFunctionCall","src":"2607:43:6"},"nodeType":"YulIf","src":"2604:2:6"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2587:5:6","type":""}],"src":"2551:122:6"},{"body":{"nodeType":"YulBlock","src":"2722:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"2779:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2788:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2791:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2781:6:6"},"nodeType":"YulFunctionCall","src":"2781:12:6"},"nodeType":"YulExpressionStatement","src":"2781:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2745:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2770:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2752:17:6"},"nodeType":"YulFunctionCall","src":"2752:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2742:2:6"},"nodeType":"YulFunctionCall","src":"2742:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2735:6:6"},"nodeType":"YulFunctionCall","src":"2735:43:6"},"nodeType":"YulIf","src":"2732:2:6"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2715:5:6","type":""}],"src":"2679:122:6"},{"body":{"nodeType":"YulBlock","src":"2849:78:6","statements":[{"body":{"nodeType":"YulBlock","src":"2905:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2914:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2917:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2907:6:6"},"nodeType":"YulFunctionCall","src":"2907:12:6"},"nodeType":"YulExpressionStatement","src":"2907:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2872:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2896:5:6"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"2879:16:6"},"nodeType":"YulFunctionCall","src":"2879:23:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2869:2:6"},"nodeType":"YulFunctionCall","src":"2869:34:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2862:6:6"},"nodeType":"YulFunctionCall","src":"2862:42:6"},"nodeType":"YulIf","src":"2859:2:6"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2842:5:6","type":""}],"src":"2807:120:6"},{"body":{"nodeType":"YulBlock","src":"2975:78:6","statements":[{"body":{"nodeType":"YulBlock","src":"3031:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3040:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3043:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3033:6:6"},"nodeType":"YulFunctionCall","src":"3033:12:6"},"nodeType":"YulExpressionStatement","src":"3033:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2998:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3022:5:6"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"3005:16:6"},"nodeType":"YulFunctionCall","src":"3005:23:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2995:2:6"},"nodeType":"YulFunctionCall","src":"2995:34:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2988:6:6"},"nodeType":"YulFunctionCall","src":"2988:42:6"},"nodeType":"YulIf","src":"2985:2:6"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2968:5:6","type":""}],"src":"2933:120:6"}]},"contents":"{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint32t_uint64t_bytes32t_addresst_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n}\n","id":6,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x17CA CODESIZE SUB DUP1 PUSH3 0x17CA DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x1D1 JUMP JUMPDEST DUP2 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP DUP1 PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP3 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x120 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 SHL DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x125 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP DUP5 PUSH4 0xFFFFFFFF AND PUSH2 0x100 DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE POP POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP DUP6 PUSH2 0x140 DUP2 DUP2 MSTORE POP POP POP POP POP POP POP POP PUSH3 0x355 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x16F DUP2 PUSH3 0x2D3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x186 DUP2 PUSH3 0x2ED JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x19D DUP2 PUSH3 0x307 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1B4 DUP2 PUSH3 0x321 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1CB DUP2 PUSH3 0x33B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x1FB DUP10 DUP3 DUP11 ADD PUSH3 0x18C JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH3 0x20E DUP10 DUP3 DUP11 ADD PUSH3 0x1A3 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH3 0x221 DUP10 DUP3 DUP11 ADD PUSH3 0x1BA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH3 0x234 DUP10 DUP3 DUP11 ADD PUSH3 0x175 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH3 0x247 DUP10 DUP3 DUP11 ADD PUSH3 0x15E JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH3 0x25A DUP10 DUP3 DUP11 ADD PUSH3 0x18C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x274 DUP3 PUSH3 0x285 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2DE DUP2 PUSH3 0x267 JUMP JUMPDEST DUP2 EQ PUSH3 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x2F8 DUP2 PUSH3 0x27B JUMP JUMPDEST DUP2 EQ PUSH3 0x304 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x312 DUP2 PUSH3 0x2A5 JUMP JUMPDEST DUP2 EQ PUSH3 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x32C DUP2 PUSH3 0x2AF JUMP JUMPDEST DUP2 EQ PUSH3 0x338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x346 DUP2 PUSH3 0x2BF JUMP JUMPDEST DUP2 EQ PUSH3 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0xE0 SHR PUSH2 0x120 MLOAD PUSH1 0xC0 SHR PUSH2 0x140 MLOAD PUSH2 0x13F9 PUSH3 0x3D1 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x5F8 ADD MSTORE PUSH2 0x6A1 ADD MSTORE PUSH1 0x0 PUSH2 0x431 ADD MSTORE PUSH1 0x0 PUSH2 0x454 ADD MSTORE PUSH1 0x0 PUSH2 0x410 ADD MSTORE PUSH1 0x0 PUSH2 0x3D4 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x248 ADD MSTORE PUSH2 0x6C7 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x26E ADD MSTORE PUSH2 0x2C2 ADD MSTORE PUSH2 0x13F9 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x91 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6B68C03C GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x6B68C03C EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x91AD27B4 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0xC1AF5785 EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0x207 JUMPI PUSH2 0x91 JUMP JUMPDEST DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0xEA JUMPI DUP1 PUSH4 0x473F1DDC EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x565429DE EQ PUSH2 0x13E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x244 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xE64 JUMP JUMPDEST PUSH2 0x26C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x111 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10C SWAP2 SWAP1 PUSH2 0xD8C JUMP JUMPDEST PUSH2 0x32C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x51C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x135 SWAP2 SWAP1 PUSH2 0xFA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x153 PUSH2 0x546 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 SWAP2 SWAP1 PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17E PUSH2 0x552 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18B SWAP2 SWAP1 PUSH2 0x1068 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B6 SWAP2 SWAP1 PUSH2 0xDD1 JUMP JUMPDEST PUSH2 0x569 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C9 SWAP3 SWAP2 SWAP1 PUSH2 0xFE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x69D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F4 SWAP2 SWAP1 PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x205 PUSH2 0x6C5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x229 SWAP2 SWAP1 PUSH2 0xE12 JUMP JUMPDEST PUSH2 0x83D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23B SWAP2 SWAP1 PUSH2 0xFA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x31E JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x315 SWAP3 SWAP2 SWAP1 PUSH2 0xFBC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x328 DUP3 DUP3 PUSH2 0x8AA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x346 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x569 JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x380 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3E754E5000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3CB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x495 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1015 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E7 SWAP2 SWAP1 PUSH2 0xE3B JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xEDDABA8A57DCFD3A637AC76EDEA7AF81443028E0BD6E6CB23BD210A4A85BA856 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5B7 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5F1 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x2 SLOAD TIMESTAMP PUSH2 0x625 SWAP2 SWAP1 PUSH2 0x1147 JUMP JUMPDEST GT SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 POP GT SWAP1 POP PUSH1 0x0 DUP1 SELFBALANCE GT SWAP1 POP DUP3 DUP1 ISZERO PUSH2 0x645 JUMPI POP DUP4 JUMPDEST DUP1 ISZERO PUSH2 0x64E JUMPI POP DUP1 JUMPDEST DUP1 ISZERO PUSH2 0x657 JUMPI POP DUP2 JUMPDEST SWAP6 POP DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3078300000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP6 POP SWAP6 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x71F JUMPI PUSH1 0x40 MLOAD PUSH32 0xF3F9345600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x759 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x7A1 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ PUSH2 0x7D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4FF3426E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x878 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8EB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x8FD SWAP2 SWAP1 PUSH2 0x1297 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x93A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x9FB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA41 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA6F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0xA85 SWAP3 SWAP2 SWAP1 PUSH2 0xB73 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0xAAC SWAP1 PUSH2 0xF8C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xAE9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAEE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xB29 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF3F9345600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x794919B0F484B8E90B1B817AC7F880F846FBD8A9813DEE2A378E820DB094E3D1 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xBEC JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xBEB JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xB93 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xBF9 SWAP2 SWAP1 PUSH2 0xBFD JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xC16 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xBFE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC2D PUSH2 0xC28 DUP5 PUSH2 0x10C3 JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0xC4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xC7C JUMPI DUP2 PUSH2 0xC62 DUP9 DUP3 PUSH2 0xD62 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xC4F JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC99 PUSH2 0xC94 DUP5 PUSH2 0x10EF JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCBC DUP5 DUP3 DUP6 PUSH2 0x1224 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCE5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xC1A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xD00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xD31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD59 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xC86 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD71 DUP2 PUSH2 0x13AC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD86 DUP2 PUSH2 0x13AC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC5 DUP6 DUP3 DUP7 ADD PUSH2 0xCEE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE09 DUP5 DUP3 DUP6 ADD PUSH2 0xD38 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE32 DUP5 DUP3 DUP6 ADD PUSH2 0xD62 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE5B DUP5 DUP3 DUP6 ADD PUSH2 0xD77 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE85 DUP6 DUP3 DUP7 ADD PUSH2 0xD62 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEAE DUP6 DUP3 DUP7 ADD PUSH2 0xCC4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xEC1 DUP2 PUSH2 0x117B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xED0 DUP2 PUSH2 0x118D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xEDF DUP2 PUSH2 0x1199 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEF0 DUP3 PUSH2 0x1120 JUMP JUMPDEST PUSH2 0xEFA DUP2 DUP6 PUSH2 0x112B JUMP JUMPDEST SWAP4 POP PUSH2 0xF0A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1233 JUMP JUMPDEST PUSH2 0xF13 DUP2 PUSH2 0x1384 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xF27 DUP2 PUSH2 0x1212 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF3A PUSH1 0x0 DUP4 PUSH2 0x113C JUMP JUMPDEST SWAP2 POP PUSH2 0xF45 DUP3 PUSH2 0x1395 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF59 DUP2 PUSH2 0x11B6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xF68 DUP2 PUSH2 0x11E4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xF77 DUP2 PUSH2 0x11EE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xF86 DUP2 PUSH2 0x11FE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF97 DUP3 PUSH2 0xF2D JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFB6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xEB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xFD1 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xEB8 JUMP JUMPDEST PUSH2 0xFDE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEB8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xFFA PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xEC7 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x100C DUP2 DUP5 PUSH2 0xEE5 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x102A PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xED6 JUMP JUMPDEST PUSH2 0x1037 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xF7D JUMP JUMPDEST PUSH2 0x1044 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xF50 JUMP JUMPDEST PUSH2 0x1051 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xF6E JUMP JUMPDEST PUSH2 0x105E PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xF6E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x107D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF1E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1098 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF5F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10A8 PUSH2 0x10B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x10B4 DUP3 DUP3 PUSH2 0x1266 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x10DE JUMPI PUSH2 0x10DD PUSH2 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x110A JUMPI PUSH2 0x1109 PUSH2 0x1355 JUMP JUMPDEST JUMPDEST PUSH2 0x1113 DUP3 PUSH2 0x1384 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1152 DUP3 PUSH2 0x11E4 JUMP JUMPDEST SWAP2 POP PUSH2 0x115D DUP4 PUSH2 0x11E4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1170 JUMPI PUSH2 0x116F PUSH2 0x12C8 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1186 DUP3 PUSH2 0x11C4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x11B1 DUP3 PUSH2 0x1398 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x121D DUP3 PUSH2 0x11A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1251 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1236 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1260 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x126F DUP3 PUSH2 0x1384 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x128E JUMPI PUSH2 0x128D PUSH2 0x1355 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12A2 DUP3 PUSH2 0x11E4 JUMP JUMPDEST SWAP2 POP PUSH2 0x12AD DUP4 PUSH2 0x11E4 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x12BD JUMPI PUSH2 0x12BC PUSH2 0x12F7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x13A9 JUMPI PUSH2 0x13A8 PUSH2 0x1326 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x13B5 DUP2 PUSH2 0x11E4 JUMP JUMPDEST DUP2 EQ PUSH2 0x13C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD CODECOPY PUSH31 0x454E2433D2C4FD1F37F98AAFA94F53F599878EB1A5137ABCB308E11AE76473 PUSH16 0x6C634300080400330000000000000000 ","sourceMap":"610:5123:5:-:0;;;1774:551;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1930:16;5616:15:4;5599:32;;;;;;;;;;;;5556:80;1972:11:5::1;1959:24;;;;::::0;::::1;2041:16;1996:62;;;;;;;;;;::::0;::::1;2081:7;2069:19;;;;::::0;::::1;2118:14;2099:33;;;;;;;;;;::::0;::::1;2160:17;2143:14;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2224:16;2203:37;;;;;;;;;;::::0;::::1;2270:15;2251;:34;;;;2309:8;2296:21;;;;::::0;::::1;1774:551:::0;;;;;;610:5123;;7:143:6;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;70:80;;;;:::o;156:143::-;213:5;244:6;238:13;229:22;;260:33;287:5;260:33;:::i;:::-;219:80;;;;:::o;305:143::-;362:5;393:6;387:13;378:22;;409:33;436:5;409:33;:::i;:::-;368:80;;;;:::o;454:141::-;510:5;541:6;535:13;526:22;;557:32;583:5;557:32;:::i;:::-;516:79;;;;:::o;601:141::-;657:5;688:6;682:13;673:22;;704:32;730:5;704:32;:::i;:::-;663:79;;;;:::o;748:1063::-;861:6;869;877;885;893;901;950:3;938:9;929:7;925:23;921:33;918:2;;;967:1;964;957:12;918:2;1010:1;1035:64;1091:7;1082:6;1071:9;1067:22;1035:64;:::i;:::-;1025:74;;981:128;1148:2;1174:63;1229:7;1220:6;1209:9;1205:22;1174:63;:::i;:::-;1164:73;;1119:128;1286:2;1312:63;1367:7;1358:6;1347:9;1343:22;1312:63;:::i;:::-;1302:73;;1257:128;1424:2;1450:64;1506:7;1497:6;1486:9;1482:22;1450:64;:::i;:::-;1440:74;;1395:129;1563:3;1590:64;1646:7;1637:6;1626:9;1622:22;1590:64;:::i;:::-;1580:74;;1534:130;1703:3;1730:64;1786:7;1777:6;1766:9;1762:22;1730:64;:::i;:::-;1720:74;;1674:130;908:903;;;;;;;;:::o;1817:96::-;1854:7;1883:24;1901:5;1883:24;:::i;:::-;1872:35;;1862:51;;;:::o;1919:77::-;1956:7;1985:5;1974:16;;1964:32;;;:::o;2002:126::-;2039:7;2079:42;2072:5;2068:54;2057:65;;2047:81;;;:::o;2134:77::-;2171:7;2200:5;2189:16;;2179:32;;;:::o;2217:93::-;2253:7;2293:10;2286:5;2282:22;2271:33;;2261:49;;;:::o;2316:101::-;2352:7;2392:18;2385:5;2381:30;2370:41;;2360:57;;;:::o;2423:122::-;2496:24;2514:5;2496:24;:::i;:::-;2489:5;2486:35;2476:2;;2535:1;2532;2525:12;2476:2;2466:79;:::o;2551:122::-;2624:24;2642:5;2624:24;:::i;:::-;2617:5;2614:35;2604:2;;2663:1;2660;2653:12;2604:2;2594:79;:::o;2679:122::-;2752:24;2770:5;2752:24;:::i;:::-;2745:5;2742:35;2732:2;;2791:1;2788;2781:12;2732:2;2722:79;:::o;2807:120::-;2879:23;2896:5;2879:23;:::i;:::-;2872:5;2869:34;2859:2;;2917:1;2914;2907:12;2859:2;2849:78;:::o;2933:120::-;3005:23;3022:5;3005:23;:::i;:::-;2998:5;2995:34;2985:2;;3043:1;3040;3033:12;2985:2;2975:78;:::o;610:5123:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13228:6","statements":[{"body":{"nodeType":"YulBlock","src":"126:553:6","statements":[{"nodeType":"YulAssignment","src":"136:90:6","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"218:6:6"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"161:56:6"},"nodeType":"YulFunctionCall","src":"161:64:6"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"145:15:6"},"nodeType":"YulFunctionCall","src":"145:81:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"136:5:6"}]},{"nodeType":"YulVariableDeclaration","src":"235:16:6","value":{"name":"array","nodeType":"YulIdentifier","src":"246:5:6"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"239:3:6","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"268:5:6"},{"name":"length","nodeType":"YulIdentifier","src":"275:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"261:6:6"},"nodeType":"YulFunctionCall","src":"261:21:6"},"nodeType":"YulExpressionStatement","src":"261:21:6"},{"nodeType":"YulAssignment","src":"291:23:6","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"302:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"309:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"298:3:6"},"nodeType":"YulFunctionCall","src":"298:16:6"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"291:3:6"}]},{"nodeType":"YulVariableDeclaration","src":"324:17:6","value":{"name":"offset","nodeType":"YulIdentifier","src":"335:6:6"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"328:3:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"390:36:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"411:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"414:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"404:6:6"},"nodeType":"YulFunctionCall","src":"404:12:6"},"nodeType":"YulExpressionStatement","src":"404:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"360:3:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"369:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"377:4:6","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"365:3:6"},"nodeType":"YulFunctionCall","src":"365:17:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"356:3:6"},"nodeType":"YulFunctionCall","src":"356:27:6"},{"name":"end","nodeType":"YulIdentifier","src":"385:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"353:2:6"},"nodeType":"YulFunctionCall","src":"353:36:6"},"nodeType":"YulIf","src":"350:2:6"},{"body":{"nodeType":"YulBlock","src":"495:178:6","statements":[{"nodeType":"YulVariableDeclaration","src":"510:21:6","value":{"name":"src","nodeType":"YulIdentifier","src":"528:3:6"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"514:10:6","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"552:3:6"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"578:10:6"},{"name":"end","nodeType":"YulIdentifier","src":"590:3:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"557:20:6"},"nodeType":"YulFunctionCall","src":"557:37:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"545:6:6"},"nodeType":"YulFunctionCall","src":"545:50:6"},"nodeType":"YulExpressionStatement","src":"545:50:6"},{"nodeType":"YulAssignment","src":"608:21:6","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"619:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"624:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"615:3:6"},"nodeType":"YulFunctionCall","src":"615:14:6"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"608:3:6"}]},{"nodeType":"YulAssignment","src":"642:21:6","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"653:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"658:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"649:3:6"},"nodeType":"YulFunctionCall","src":"649:14:6"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"642:3:6"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"457:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"460:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"454:2:6"},"nodeType":"YulFunctionCall","src":"454:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"468:18:6","statements":[{"nodeType":"YulAssignment","src":"470:14:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"479:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"482:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"475:3:6"},"nodeType":"YulFunctionCall","src":"475:9:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"470:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"439:14:6","statements":[{"nodeType":"YulVariableDeclaration","src":"441:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"450:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"445:1:6","type":""}]}]},"src":"435:238:6"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"96:6:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"104:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"112:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"120:5:6","type":""}],"src":"24:655:6"},{"body":{"nodeType":"YulBlock","src":"768:260:6","statements":[{"nodeType":"YulAssignment","src":"778:74:6","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"844:6:6"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"803:40:6"},"nodeType":"YulFunctionCall","src":"803:48:6"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"787:15:6"},"nodeType":"YulFunctionCall","src":"787:65:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"778:5:6"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"868:5:6"},{"name":"length","nodeType":"YulIdentifier","src":"875:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"861:6:6"},"nodeType":"YulFunctionCall","src":"861:21:6"},"nodeType":"YulExpressionStatement","src":"861:21:6"},{"nodeType":"YulVariableDeclaration","src":"891:27:6","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"906:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"913:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"902:3:6"},"nodeType":"YulFunctionCall","src":"902:16:6"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"895:3:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"956:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"965:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"968:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"958:6:6"},"nodeType":"YulFunctionCall","src":"958:12:6"},"nodeType":"YulExpressionStatement","src":"958:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"937:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"942:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"933:3:6"},"nodeType":"YulFunctionCall","src":"933:16:6"},{"name":"end","nodeType":"YulIdentifier","src":"951:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"930:2:6"},"nodeType":"YulFunctionCall","src":"930:25:6"},"nodeType":"YulIf","src":"927:2:6"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1005:3:6"},{"name":"dst","nodeType":"YulIdentifier","src":"1010:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"1015:6:6"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"981:23:6"},"nodeType":"YulFunctionCall","src":"981:41:6"},"nodeType":"YulExpressionStatement","src":"981:41:6"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"741:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"746:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"754:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"762:5:6","type":""}],"src":"685:343:6"},{"body":{"nodeType":"YulBlock","src":"1128:226:6","statements":[{"body":{"nodeType":"YulBlock","src":"1177:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1186:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1189:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1179:6:6"},"nodeType":"YulFunctionCall","src":"1179:12:6"},"nodeType":"YulExpressionStatement","src":"1179:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1156:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1164:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1152:3:6"},"nodeType":"YulFunctionCall","src":"1152:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"1171:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1148:3:6"},"nodeType":"YulFunctionCall","src":"1148:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1141:6:6"},"nodeType":"YulFunctionCall","src":"1141:35:6"},"nodeType":"YulIf","src":"1138:2:6"},{"nodeType":"YulVariableDeclaration","src":"1202:34:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1229:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1216:12:6"},"nodeType":"YulFunctionCall","src":"1216:20:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1206:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1245:103:6","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1321:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1329:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1317:3:6"},"nodeType":"YulFunctionCall","src":"1317:17:6"},{"name":"length","nodeType":"YulIdentifier","src":"1336:6:6"},{"name":"end","nodeType":"YulIdentifier","src":"1344:3:6"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"1254:62:6"},"nodeType":"YulFunctionCall","src":"1254:94:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1245:5:6"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1106:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1114:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1122:5:6","type":""}],"src":"1051:303:6"},{"body":{"nodeType":"YulBlock","src":"1447:277:6","statements":[{"body":{"nodeType":"YulBlock","src":"1496:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1505:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1508:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1498:6:6"},"nodeType":"YulFunctionCall","src":"1498:12:6"},"nodeType":"YulExpressionStatement","src":"1498:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1475:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1483:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1471:3:6"},"nodeType":"YulFunctionCall","src":"1471:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"1490:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1467:3:6"},"nodeType":"YulFunctionCall","src":"1467:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1460:6:6"},"nodeType":"YulFunctionCall","src":"1460:35:6"},"nodeType":"YulIf","src":"1457:2:6"},{"nodeType":"YulAssignment","src":"1521:30:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1544:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1531:12:6"},"nodeType":"YulFunctionCall","src":"1531:20:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1521:6:6"}]},{"body":{"nodeType":"YulBlock","src":"1594:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1603:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1606:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1596:6:6"},"nodeType":"YulFunctionCall","src":"1596:12:6"},"nodeType":"YulExpressionStatement","src":"1596:12:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1566:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1574:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1563:2:6"},"nodeType":"YulFunctionCall","src":"1563:30:6"},"nodeType":"YulIf","src":"1560:2:6"},{"nodeType":"YulAssignment","src":"1619:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1635:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1643:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1631:3:6"},"nodeType":"YulFunctionCall","src":"1631:17:6"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1619:8:6"}]},{"body":{"nodeType":"YulBlock","src":"1702:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1711:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1714:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1704:6:6"},"nodeType":"YulFunctionCall","src":"1704:12:6"},"nodeType":"YulExpressionStatement","src":"1704:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1667:8:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1681:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1689:4:6","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1677:3:6"},"nodeType":"YulFunctionCall","src":"1677:17:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1663:3:6"},"nodeType":"YulFunctionCall","src":"1663:32:6"},{"name":"end","nodeType":"YulIdentifier","src":"1697:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1660:2:6"},"nodeType":"YulFunctionCall","src":"1660:41:6"},"nodeType":"YulIf","src":"1657:2:6"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1414:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1422:3:6","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1430:8:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"1440:6:6","type":""}],"src":"1373:351:6"},{"body":{"nodeType":"YulBlock","src":"1804:210:6","statements":[{"body":{"nodeType":"YulBlock","src":"1853:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1862:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1865:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1855:6:6"},"nodeType":"YulFunctionCall","src":"1855:12:6"},"nodeType":"YulExpressionStatement","src":"1855:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1832:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1840:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1828:3:6"},"nodeType":"YulFunctionCall","src":"1828:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"1847:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1824:3:6"},"nodeType":"YulFunctionCall","src":"1824:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1817:6:6"},"nodeType":"YulFunctionCall","src":"1817:35:6"},"nodeType":"YulIf","src":"1814:2:6"},{"nodeType":"YulVariableDeclaration","src":"1878:34:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1905:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1892:12:6"},"nodeType":"YulFunctionCall","src":"1892:20:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1882:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1921:87:6","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1981:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1989:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1977:3:6"},"nodeType":"YulFunctionCall","src":"1977:17:6"},{"name":"length","nodeType":"YulIdentifier","src":"1996:6:6"},{"name":"end","nodeType":"YulIdentifier","src":"2004:3:6"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"1930:46:6"},"nodeType":"YulFunctionCall","src":"1930:78:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1921:5:6"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1782:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1790:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1798:5:6","type":""}],"src":"1743:271:6"},{"body":{"nodeType":"YulBlock","src":"2072:87:6","statements":[{"nodeType":"YulAssignment","src":"2082:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2104:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2091:12:6"},"nodeType":"YulFunctionCall","src":"2091:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2082:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2147:5:6"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2120:26:6"},"nodeType":"YulFunctionCall","src":"2120:33:6"},"nodeType":"YulExpressionStatement","src":"2120:33:6"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2050:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"2058:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2066:5:6","type":""}],"src":"2020:139:6"},{"body":{"nodeType":"YulBlock","src":"2228:80:6","statements":[{"nodeType":"YulAssignment","src":"2238:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2253:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2247:5:6"},"nodeType":"YulFunctionCall","src":"2247:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2238:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2296:5:6"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2269:26:6"},"nodeType":"YulFunctionCall","src":"2269:33:6"},"nodeType":"YulExpressionStatement","src":"2269:33:6"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2206:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"2214:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2222:5:6","type":""}],"src":"2165:143:6"},{"body":{"nodeType":"YulBlock","src":"2399:308:6","statements":[{"body":{"nodeType":"YulBlock","src":"2445:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2454:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2457:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2447:6:6"},"nodeType":"YulFunctionCall","src":"2447:12:6"},"nodeType":"YulExpressionStatement","src":"2447:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2420:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"2429:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2416:3:6"},"nodeType":"YulFunctionCall","src":"2416:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"2441:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2412:3:6"},"nodeType":"YulFunctionCall","src":"2412:32:6"},"nodeType":"YulIf","src":"2409:2:6"},{"nodeType":"YulBlock","src":"2471:229:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2486:45:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2517:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2528:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2513:3:6"},"nodeType":"YulFunctionCall","src":"2513:17:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2500:12:6"},"nodeType":"YulFunctionCall","src":"2500:31:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2490:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2578:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2587:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2590:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2580:6:6"},"nodeType":"YulFunctionCall","src":"2580:12:6"},"nodeType":"YulExpressionStatement","src":"2580:12:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2550:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2558:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2547:2:6"},"nodeType":"YulFunctionCall","src":"2547:30:6"},"nodeType":"YulIf","src":"2544:2:6"},{"nodeType":"YulAssignment","src":"2608:82:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2662:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"2673:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2658:3:6"},"nodeType":"YulFunctionCall","src":"2658:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2682:7:6"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"2626:31:6"},"nodeType":"YulFunctionCall","src":"2626:64:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2608:6:6"},{"name":"value1","nodeType":"YulIdentifier","src":"2616:6:6"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2361:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2372:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2384:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2392:6:6","type":""}],"src":"2314:393:6"},{"body":{"nodeType":"YulBlock","src":"2788:298:6","statements":[{"body":{"nodeType":"YulBlock","src":"2834:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2843:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2846:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2836:6:6"},"nodeType":"YulFunctionCall","src":"2836:12:6"},"nodeType":"YulExpressionStatement","src":"2836:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2809:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"2818:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2805:3:6"},"nodeType":"YulFunctionCall","src":"2805:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"2830:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2801:3:6"},"nodeType":"YulFunctionCall","src":"2801:32:6"},"nodeType":"YulIf","src":"2798:2:6"},{"nodeType":"YulBlock","src":"2860:219:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2875:45:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2906:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2917:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2902:3:6"},"nodeType":"YulFunctionCall","src":"2902:17:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2889:12:6"},"nodeType":"YulFunctionCall","src":"2889:31:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2879:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2967:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2976:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2979:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2969:6:6"},"nodeType":"YulFunctionCall","src":"2969:12:6"},"nodeType":"YulExpressionStatement","src":"2969:12:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2939:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2947:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2936:2:6"},"nodeType":"YulFunctionCall","src":"2936:30:6"},"nodeType":"YulIf","src":"2933:2:6"},{"nodeType":"YulAssignment","src":"2997:72:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3041:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3052:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3037:3:6"},"nodeType":"YulFunctionCall","src":"3037:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3061:7:6"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3007:29:6"},"nodeType":"YulFunctionCall","src":"3007:62:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2997:6:6"}]}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2758:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2769:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2781:6:6","type":""}],"src":"2713:373:6"},{"body":{"nodeType":"YulBlock","src":"3158:196:6","statements":[{"body":{"nodeType":"YulBlock","src":"3204:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3213:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3216:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3206:6:6"},"nodeType":"YulFunctionCall","src":"3206:12:6"},"nodeType":"YulExpressionStatement","src":"3206:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3179:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"3188:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3175:3:6"},"nodeType":"YulFunctionCall","src":"3175:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"3200:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3171:3:6"},"nodeType":"YulFunctionCall","src":"3171:32:6"},"nodeType":"YulIf","src":"3168:2:6"},{"nodeType":"YulBlock","src":"3230:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3245:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3259:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3249:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3274:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3309:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3320:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3305:3:6"},"nodeType":"YulFunctionCall","src":"3305:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3329:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3284:20:6"},"nodeType":"YulFunctionCall","src":"3284:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3274:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3128:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3139:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3151:6:6","type":""}],"src":"3092:262:6"},{"body":{"nodeType":"YulBlock","src":"3437:207:6","statements":[{"body":{"nodeType":"YulBlock","src":"3483:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3492:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3495:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3485:6:6"},"nodeType":"YulFunctionCall","src":"3485:12:6"},"nodeType":"YulExpressionStatement","src":"3485:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3458:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"3467:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3454:3:6"},"nodeType":"YulFunctionCall","src":"3454:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"3479:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3450:3:6"},"nodeType":"YulFunctionCall","src":"3450:32:6"},"nodeType":"YulIf","src":"3447:2:6"},{"nodeType":"YulBlock","src":"3509:128:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3524:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3538:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3528:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3553:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3599:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3610:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3595:3:6"},"nodeType":"YulFunctionCall","src":"3595:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3619:7:6"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"3563:31:6"},"nodeType":"YulFunctionCall","src":"3563:64:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3553:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3407:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3418:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3430:6:6","type":""}],"src":"3360:284:6"},{"body":{"nodeType":"YulBlock","src":"3758:442:6","statements":[{"body":{"nodeType":"YulBlock","src":"3804:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3813:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3816:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3806:6:6"},"nodeType":"YulFunctionCall","src":"3806:12:6"},"nodeType":"YulExpressionStatement","src":"3806:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3779:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"3788:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3775:3:6"},"nodeType":"YulFunctionCall","src":"3775:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"3800:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3771:3:6"},"nodeType":"YulFunctionCall","src":"3771:32:6"},"nodeType":"YulIf","src":"3768:2:6"},{"nodeType":"YulBlock","src":"3830:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3845:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3859:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3849:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3874:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3909:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3920:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3905:3:6"},"nodeType":"YulFunctionCall","src":"3905:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3929:7:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3884:20:6"},"nodeType":"YulFunctionCall","src":"3884:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3874:6:6"}]}]},{"nodeType":"YulBlock","src":"3957:236:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3972:46:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4003:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4014:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3999:3:6"},"nodeType":"YulFunctionCall","src":"3999:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3986:12:6"},"nodeType":"YulFunctionCall","src":"3986:32:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3976:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"4065:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4074:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4077:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4067:6:6"},"nodeType":"YulFunctionCall","src":"4067:12:6"},"nodeType":"YulExpressionStatement","src":"4067:12:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4037:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"4045:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4034:2:6"},"nodeType":"YulFunctionCall","src":"4034:30:6"},"nodeType":"YulIf","src":"4031:2:6"},{"nodeType":"YulAssignment","src":"4095:88:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4155:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"4166:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4151:3:6"},"nodeType":"YulFunctionCall","src":"4151:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4175:7:6"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4105:45:6"},"nodeType":"YulFunctionCall","src":"4105:78:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4095:6:6"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3720:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3731:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3743:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3751:6:6","type":""}],"src":"3650:550:6"},{"body":{"nodeType":"YulBlock","src":"4271:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4288:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4311:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4293:17:6"},"nodeType":"YulFunctionCall","src":"4293:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4281:6:6"},"nodeType":"YulFunctionCall","src":"4281:37:6"},"nodeType":"YulExpressionStatement","src":"4281:37:6"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4259:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4266:3:6","type":""}],"src":"4206:118:6"},{"body":{"nodeType":"YulBlock","src":"4389:50:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4406:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4426:5:6"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"4411:14:6"},"nodeType":"YulFunctionCall","src":"4411:21:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4399:6:6"},"nodeType":"YulFunctionCall","src":"4399:34:6"},"nodeType":"YulExpressionStatement","src":"4399:34:6"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4377:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4384:3:6","type":""}],"src":"4330:109:6"},{"body":{"nodeType":"YulBlock","src":"4510:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4527:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4550:5:6"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"4532:17:6"},"nodeType":"YulFunctionCall","src":"4532:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4520:6:6"},"nodeType":"YulFunctionCall","src":"4520:37:6"},"nodeType":"YulExpressionStatement","src":"4520:37:6"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4498:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4505:3:6","type":""}],"src":"4445:118:6"},{"body":{"nodeType":"YulBlock","src":"4659:270:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4669:52:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4715:5:6"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"4683:31:6"},"nodeType":"YulFunctionCall","src":"4683:38:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4673:6:6","type":""}]},{"nodeType":"YulAssignment","src":"4730:77:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4795:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"4800:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4737:57:6"},"nodeType":"YulFunctionCall","src":"4737:70:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4730:3:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4842:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"4849:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4838:3:6"},"nodeType":"YulFunctionCall","src":"4838:16:6"},{"name":"pos","nodeType":"YulIdentifier","src":"4856:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"4861:6:6"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"4816:21:6"},"nodeType":"YulFunctionCall","src":"4816:52:6"},"nodeType":"YulExpressionStatement","src":"4816:52:6"},{"nodeType":"YulAssignment","src":"4877:46:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4888:3:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4915:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"4893:21:6"},"nodeType":"YulFunctionCall","src":"4893:29:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4884:3:6"},"nodeType":"YulFunctionCall","src":"4884:39:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4877:3:6"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4640:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4647:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4655:3:6","type":""}],"src":"4569:360:6"},{"body":{"nodeType":"YulBlock","src":"5014:80:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5031:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5081:5:6"}],"functionName":{"name":"convert_t_enum$_LotteryState_$229_to_t_uint8","nodeType":"YulIdentifier","src":"5036:44:6"},"nodeType":"YulFunctionCall","src":"5036:51:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5024:6:6"},"nodeType":"YulFunctionCall","src":"5024:64:6"},"nodeType":"YulExpressionStatement","src":"5024:64:6"}]},"name":"abi_encode_t_enum$_LotteryState_$229_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5002:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5009:3:6","type":""}],"src":"4935:159:6"},{"body":{"nodeType":"YulBlock","src":"5263:235:6","statements":[{"nodeType":"YulAssignment","src":"5273:90:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5356:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"5361:1:6","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"5280:75:6"},"nodeType":"YulFunctionCall","src":"5280:83:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5273:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5461:3:6"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"5372:88:6"},"nodeType":"YulFunctionCall","src":"5372:93:6"},"nodeType":"YulExpressionStatement","src":"5372:93:6"},{"nodeType":"YulAssignment","src":"5474:18:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5485:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"5490:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5481:3:6"},"nodeType":"YulFunctionCall","src":"5481:11:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5474:3:6"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5251:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5259:3:6","type":""}],"src":"5100:398:6"},{"body":{"nodeType":"YulBlock","src":"5567:52:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5584:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5606:5:6"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"5589:16:6"},"nodeType":"YulFunctionCall","src":"5589:23:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5577:6:6"},"nodeType":"YulFunctionCall","src":"5577:36:6"},"nodeType":"YulExpressionStatement","src":"5577:36:6"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5555:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5562:3:6","type":""}],"src":"5504:115:6"},{"body":{"nodeType":"YulBlock","src":"5690:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5707:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5730:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5712:17:6"},"nodeType":"YulFunctionCall","src":"5712:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5700:6:6"},"nodeType":"YulFunctionCall","src":"5700:37:6"},"nodeType":"YulExpressionStatement","src":"5700:37:6"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5678:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5685:3:6","type":""}],"src":"5625:118:6"},{"body":{"nodeType":"YulBlock","src":"5812:52:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5829:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5851:5:6"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"5834:16:6"},"nodeType":"YulFunctionCall","src":"5834:23:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5822:6:6"},"nodeType":"YulFunctionCall","src":"5822:36:6"},"nodeType":"YulExpressionStatement","src":"5822:36:6"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5800:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5807:3:6","type":""}],"src":"5749:115:6"},{"body":{"nodeType":"YulBlock","src":"5933:52:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5950:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5972:5:6"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"5955:16:6"},"nodeType":"YulFunctionCall","src":"5955:23:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5943:6:6"},"nodeType":"YulFunctionCall","src":"5943:36:6"},"nodeType":"YulExpressionStatement","src":"5943:36:6"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5921:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5928:3:6","type":""}],"src":"5870:115:6"},{"body":{"nodeType":"YulBlock","src":"6179:191:6","statements":[{"nodeType":"YulAssignment","src":"6190:154:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6340:3:6"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"6197:141:6"},"nodeType":"YulFunctionCall","src":"6197:147:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6190:3:6"}]},{"nodeType":"YulAssignment","src":"6354:10:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"6361:3:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6354:3:6"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6166:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6175:3:6","type":""}],"src":"5991:379:6"},{"body":{"nodeType":"YulBlock","src":"6474:124:6","statements":[{"nodeType":"YulAssignment","src":"6484:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6496:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6507:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6492:3:6"},"nodeType":"YulFunctionCall","src":"6492:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6484:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6564:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6577:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6588:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6573:3:6"},"nodeType":"YulFunctionCall","src":"6573:17:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6520:43:6"},"nodeType":"YulFunctionCall","src":"6520:71:6"},"nodeType":"YulExpressionStatement","src":"6520:71:6"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6446:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6458:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6469:4:6","type":""}],"src":"6376:222:6"},{"body":{"nodeType":"YulBlock","src":"6730:206:6","statements":[{"nodeType":"YulAssignment","src":"6740:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6752:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6763:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6748:3:6"},"nodeType":"YulFunctionCall","src":"6748:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6740:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6820:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6833:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6844:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6829:3:6"},"nodeType":"YulFunctionCall","src":"6829:17:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6776:43:6"},"nodeType":"YulFunctionCall","src":"6776:71:6"},"nodeType":"YulExpressionStatement","src":"6776:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6901:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6914:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6925:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6910:3:6"},"nodeType":"YulFunctionCall","src":"6910:18:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6857:43:6"},"nodeType":"YulFunctionCall","src":"6857:72:6"},"nodeType":"YulExpressionStatement","src":"6857:72:6"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6694:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6706:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6714:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6725:4:6","type":""}],"src":"6604:332:6"},{"body":{"nodeType":"YulBlock","src":"7080:269:6","statements":[{"nodeType":"YulAssignment","src":"7090:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7102:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7113:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7098:3:6"},"nodeType":"YulFunctionCall","src":"7098:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7090:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7164:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7177:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7188:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7173:3:6"},"nodeType":"YulFunctionCall","src":"7173:17:6"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"7126:37:6"},"nodeType":"YulFunctionCall","src":"7126:65:6"},"nodeType":"YulExpressionStatement","src":"7126:65:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7212:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7223:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7208:3:6"},"nodeType":"YulFunctionCall","src":"7208:18:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7232:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"7238:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7228:3:6"},"nodeType":"YulFunctionCall","src":"7228:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7201:6:6"},"nodeType":"YulFunctionCall","src":"7201:48:6"},"nodeType":"YulExpressionStatement","src":"7201:48:6"},{"nodeType":"YulAssignment","src":"7258:84:6","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7328:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"7337:4:6"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7266:61:6"},"nodeType":"YulFunctionCall","src":"7266:76:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7258:4:6"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7044:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7056:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7064:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7075:4:6","type":""}],"src":"6942:407:6"},{"body":{"nodeType":"YulBlock","src":"7557:446:6","statements":[{"nodeType":"YulAssignment","src":"7567:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7579:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7590:3:6","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7575:3:6"},"nodeType":"YulFunctionCall","src":"7575:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7567:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7648:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7661:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7672:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7657:3:6"},"nodeType":"YulFunctionCall","src":"7657:17:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"7604:43:6"},"nodeType":"YulFunctionCall","src":"7604:71:6"},"nodeType":"YulExpressionStatement","src":"7604:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7727:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7740:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7751:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7736:3:6"},"nodeType":"YulFunctionCall","src":"7736:18:6"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"7685:41:6"},"nodeType":"YulFunctionCall","src":"7685:70:6"},"nodeType":"YulExpressionStatement","src":"7685:70:6"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7807:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7820:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7831:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7816:3:6"},"nodeType":"YulFunctionCall","src":"7816:18:6"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"7765:41:6"},"nodeType":"YulFunctionCall","src":"7765:70:6"},"nodeType":"YulExpressionStatement","src":"7765:70:6"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"7887:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7900:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7911:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7896:3:6"},"nodeType":"YulFunctionCall","src":"7896:18:6"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"7845:41:6"},"nodeType":"YulFunctionCall","src":"7845:70:6"},"nodeType":"YulExpressionStatement","src":"7845:70:6"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"7967:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7980:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7991:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7976:3:6"},"nodeType":"YulFunctionCall","src":"7976:19:6"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"7925:41:6"},"nodeType":"YulFunctionCall","src":"7925:71:6"},"nodeType":"YulExpressionStatement","src":"7925:71:6"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7497:9:6","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7509:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7517:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7525:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7533:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7541:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7552:4:6","type":""}],"src":"7355:648:6"},{"body":{"nodeType":"YulBlock","src":"8121:138:6","statements":[{"nodeType":"YulAssignment","src":"8131:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8143:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8154:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8139:3:6"},"nodeType":"YulFunctionCall","src":"8139:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8131:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8225:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8238:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8249:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8234:3:6"},"nodeType":"YulFunctionCall","src":"8234:17:6"}],"functionName":{"name":"abi_encode_t_enum$_LotteryState_$229_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"8167:57:6"},"nodeType":"YulFunctionCall","src":"8167:85:6"},"nodeType":"YulExpressionStatement","src":"8167:85:6"}]},"name":"abi_encode_tuple_t_enum$_LotteryState_$229__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8093:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8105:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8116:4:6","type":""}],"src":"8009:250:6"},{"body":{"nodeType":"YulBlock","src":"8363:124:6","statements":[{"nodeType":"YulAssignment","src":"8373:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8385:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8396:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8381:3:6"},"nodeType":"YulFunctionCall","src":"8381:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8373:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8453:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8466:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8477:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8462:3:6"},"nodeType":"YulFunctionCall","src":"8462:17:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8409:43:6"},"nodeType":"YulFunctionCall","src":"8409:71:6"},"nodeType":"YulExpressionStatement","src":"8409:71:6"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8335:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8347:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8358:4:6","type":""}],"src":"8265:222:6"},{"body":{"nodeType":"YulBlock","src":"8534:88:6","statements":[{"nodeType":"YulAssignment","src":"8544:30:6","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"8554:18:6"},"nodeType":"YulFunctionCall","src":"8554:20:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8544:6:6"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8603:6:6"},{"name":"size","nodeType":"YulIdentifier","src":"8611:4:6"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"8583:19:6"},"nodeType":"YulFunctionCall","src":"8583:33:6"},"nodeType":"YulExpressionStatement","src":"8583:33:6"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"8518:4:6","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"8527:6:6","type":""}],"src":"8493:129:6"},{"body":{"nodeType":"YulBlock","src":"8668:35:6","statements":[{"nodeType":"YulAssignment","src":"8678:19:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8694:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8688:5:6"},"nodeType":"YulFunctionCall","src":"8688:9:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8678:6:6"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"8661:6:6","type":""}],"src":"8628:75:6"},{"body":{"nodeType":"YulBlock","src":"8791:229:6","statements":[{"body":{"nodeType":"YulBlock","src":"8896:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8898:16:6"},"nodeType":"YulFunctionCall","src":"8898:18:6"},"nodeType":"YulExpressionStatement","src":"8898:18:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8868:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"8876:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8865:2:6"},"nodeType":"YulFunctionCall","src":"8865:30:6"},"nodeType":"YulIf","src":"8862:2:6"},{"nodeType":"YulAssignment","src":"8928:25:6","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8940:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"8948:4:6","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8936:3:6"},"nodeType":"YulFunctionCall","src":"8936:17:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8928:4:6"}]},{"nodeType":"YulAssignment","src":"8990:23:6","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"9002:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"9008:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8998:3:6"},"nodeType":"YulFunctionCall","src":"8998:15:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8990:4:6"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"8775:6:6","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"8786:4:6","type":""}],"src":"8709:311:6"},{"body":{"nodeType":"YulBlock","src":"9092:241:6","statements":[{"body":{"nodeType":"YulBlock","src":"9197:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9199:16:6"},"nodeType":"YulFunctionCall","src":"9199:18:6"},"nodeType":"YulExpressionStatement","src":"9199:18:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9169:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"9177:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9166:2:6"},"nodeType":"YulFunctionCall","src":"9166:30:6"},"nodeType":"YulIf","src":"9163:2:6"},{"nodeType":"YulAssignment","src":"9229:37:6","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9259:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9237:21:6"},"nodeType":"YulFunctionCall","src":"9237:29:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9229:4:6"}]},{"nodeType":"YulAssignment","src":"9303:23:6","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"9315:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"9321:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9311:3:6"},"nodeType":"YulFunctionCall","src":"9311:15:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"9303:4:6"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"9076:6:6","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"9087:4:6","type":""}],"src":"9026:307:6"},{"body":{"nodeType":"YulBlock","src":"9397:40:6","statements":[{"nodeType":"YulAssignment","src":"9408:22:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9424:5:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9418:5:6"},"nodeType":"YulFunctionCall","src":"9418:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9408:6:6"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9380:5:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"9390:6:6","type":""}],"src":"9339:98:6"},{"body":{"nodeType":"YulBlock","src":"9538:73:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9555:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"9560:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9548:6:6"},"nodeType":"YulFunctionCall","src":"9548:19:6"},"nodeType":"YulExpressionStatement","src":"9548:19:6"},{"nodeType":"YulAssignment","src":"9576:29:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9595:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"9600:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9591:3:6"},"nodeType":"YulFunctionCall","src":"9591:14:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9576:11:6"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9510:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"9515:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9526:11:6","type":""}],"src":"9443:168:6"},{"body":{"nodeType":"YulBlock","src":"9730:34:6","statements":[{"nodeType":"YulAssignment","src":"9740:18:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"9755:3:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9740:11:6"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9702:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"9707:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9718:11:6","type":""}],"src":"9617:147:6"},{"body":{"nodeType":"YulBlock","src":"9815:146:6","statements":[{"nodeType":"YulAssignment","src":"9825:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9848:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9830:17:6"},"nodeType":"YulFunctionCall","src":"9830:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"9825:1:6"}]},{"nodeType":"YulAssignment","src":"9859:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9882:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9864:17:6"},"nodeType":"YulFunctionCall","src":"9864:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9859:1:6"}]},{"body":{"nodeType":"YulBlock","src":"9906:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9908:16:6"},"nodeType":"YulFunctionCall","src":"9908:18:6"},"nodeType":"YulExpressionStatement","src":"9908:18:6"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9900:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"9903:1:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9897:2:6"},"nodeType":"YulFunctionCall","src":"9897:8:6"},"nodeType":"YulIf","src":"9894:2:6"},{"nodeType":"YulAssignment","src":"9938:17:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9950:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"9953:1:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9946:3:6"},"nodeType":"YulFunctionCall","src":"9946:9:6"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"9938:4:6"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9801:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"9804:1:6","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"9810:4:6","type":""}],"src":"9770:191:6"},{"body":{"nodeType":"YulBlock","src":"10012:51:6","statements":[{"nodeType":"YulAssignment","src":"10022:35:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10051:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"10033:17:6"},"nodeType":"YulFunctionCall","src":"10033:24:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10022:7:6"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9994:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10004:7:6","type":""}],"src":"9967:96:6"},{"body":{"nodeType":"YulBlock","src":"10111:48:6","statements":[{"nodeType":"YulAssignment","src":"10121:32:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10146:5:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10139:6:6"},"nodeType":"YulFunctionCall","src":"10139:13:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10132:6:6"},"nodeType":"YulFunctionCall","src":"10132:21:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10121:7:6"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10093:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10103:7:6","type":""}],"src":"10069:90:6"},{"body":{"nodeType":"YulBlock","src":"10210:32:6","statements":[{"nodeType":"YulAssignment","src":"10220:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"10231:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10220:7:6"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10192:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10202:7:6","type":""}],"src":"10165:77:6"},{"body":{"nodeType":"YulBlock","src":"10309:82:6","statements":[{"nodeType":"YulAssignment","src":"10319:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"10330:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10319:7:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10379:5:6"}],"functionName":{"name":"validator_assert_t_enum$_LotteryState_$229","nodeType":"YulIdentifier","src":"10336:42:6"},"nodeType":"YulFunctionCall","src":"10336:49:6"},"nodeType":"YulExpressionStatement","src":"10336:49:6"}]},"name":"cleanup_t_enum$_LotteryState_$229","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10291:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10301:7:6","type":""}],"src":"10248:143:6"},{"body":{"nodeType":"YulBlock","src":"10441:45:6","statements":[{"nodeType":"YulAssignment","src":"10451:29:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10466:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"10473:6:6","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10462:3:6"},"nodeType":"YulFunctionCall","src":"10462:18:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10451:7:6"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10423:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10433:7:6","type":""}],"src":"10397:89:6"},{"body":{"nodeType":"YulBlock","src":"10537:81:6","statements":[{"nodeType":"YulAssignment","src":"10547:65:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10562:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"10569:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10558:3:6"},"nodeType":"YulFunctionCall","src":"10558:54:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10547:7:6"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10519:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10529:7:6","type":""}],"src":"10492:126:6"},{"body":{"nodeType":"YulBlock","src":"10669:32:6","statements":[{"nodeType":"YulAssignment","src":"10679:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"10690:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10679:7:6"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10651:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10661:7:6","type":""}],"src":"10624:77:6"},{"body":{"nodeType":"YulBlock","src":"10751:49:6","statements":[{"nodeType":"YulAssignment","src":"10761:33:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10776:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"10783:10:6","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10772:3:6"},"nodeType":"YulFunctionCall","src":"10772:22:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10761:7:6"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10733:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10743:7:6","type":""}],"src":"10707:93:6"},{"body":{"nodeType":"YulBlock","src":"10850:57:6","statements":[{"nodeType":"YulAssignment","src":"10860:41:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10875:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"10882:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10871:3:6"},"nodeType":"YulFunctionCall","src":"10871:30:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10860:7:6"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10832:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10842:7:6","type":""}],"src":"10806:101:6"},{"body":{"nodeType":"YulBlock","src":"10987:69:6","statements":[{"nodeType":"YulAssignment","src":"10997:53:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11044:5:6"}],"functionName":{"name":"cleanup_t_enum$_LotteryState_$229","nodeType":"YulIdentifier","src":"11010:33:6"},"nodeType":"YulFunctionCall","src":"11010:40:6"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"10997:9:6"}]}]},"name":"convert_t_enum$_LotteryState_$229_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10967:5:6","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"10977:9:6","type":""}],"src":"10913:143:6"},{"body":{"nodeType":"YulBlock","src":"11113:103:6","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11136:3:6"},{"name":"src","nodeType":"YulIdentifier","src":"11141:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"11146:6:6"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"11123:12:6"},"nodeType":"YulFunctionCall","src":"11123:30:6"},"nodeType":"YulExpressionStatement","src":"11123:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11194:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"11199:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11190:3:6"},"nodeType":"YulFunctionCall","src":"11190:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"11208:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11183:6:6"},"nodeType":"YulFunctionCall","src":"11183:27:6"},"nodeType":"YulExpressionStatement","src":"11183:27:6"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"11095:3:6","type":""},{"name":"dst","nodeType":"YulTypedName","src":"11100:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"11105:6:6","type":""}],"src":"11062:154:6"},{"body":{"nodeType":"YulBlock","src":"11271:258:6","statements":[{"nodeType":"YulVariableDeclaration","src":"11281:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"11290:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"11285:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"11350:63:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11375:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"11380:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11371:3:6"},"nodeType":"YulFunctionCall","src":"11371:11:6"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11394:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"11399:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11390:3:6"},"nodeType":"YulFunctionCall","src":"11390:11:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11384:5:6"},"nodeType":"YulFunctionCall","src":"11384:18:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11364:6:6"},"nodeType":"YulFunctionCall","src":"11364:39:6"},"nodeType":"YulExpressionStatement","src":"11364:39:6"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11311:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"11314:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11308:2:6"},"nodeType":"YulFunctionCall","src":"11308:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11322:19:6","statements":[{"nodeType":"YulAssignment","src":"11324:15:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11333:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"11336:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11329:3:6"},"nodeType":"YulFunctionCall","src":"11329:10:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"11324:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"11304:3:6","statements":[]},"src":"11300:113:6"},{"body":{"nodeType":"YulBlock","src":"11447:76:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"11497:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"11502:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11493:3:6"},"nodeType":"YulFunctionCall","src":"11493:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"11511:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11486:6:6"},"nodeType":"YulFunctionCall","src":"11486:27:6"},"nodeType":"YulExpressionStatement","src":"11486:27:6"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11428:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"11431:6:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11425:2:6"},"nodeType":"YulFunctionCall","src":"11425:13:6"},"nodeType":"YulIf","src":"11422:2:6"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"11253:3:6","type":""},{"name":"dst","nodeType":"YulTypedName","src":"11258:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"11263:6:6","type":""}],"src":"11222:307:6"},{"body":{"nodeType":"YulBlock","src":"11578:238:6","statements":[{"nodeType":"YulVariableDeclaration","src":"11588:58:6","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11610:6:6"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"11640:4:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"11618:21:6"},"nodeType":"YulFunctionCall","src":"11618:27:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11606:3:6"},"nodeType":"YulFunctionCall","src":"11606:40:6"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"11592:10:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"11757:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"11759:16:6"},"nodeType":"YulFunctionCall","src":"11759:18:6"},"nodeType":"YulExpressionStatement","src":"11759:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"11700:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"11712:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11697:2:6"},"nodeType":"YulFunctionCall","src":"11697:34:6"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"11736:10:6"},{"name":"memPtr","nodeType":"YulIdentifier","src":"11748:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11733:2:6"},"nodeType":"YulFunctionCall","src":"11733:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"11694:2:6"},"nodeType":"YulFunctionCall","src":"11694:62:6"},"nodeType":"YulIf","src":"11691:2:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11795:2:6","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"11799:10:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11788:6:6"},"nodeType":"YulFunctionCall","src":"11788:22:6"},"nodeType":"YulExpressionStatement","src":"11788:22:6"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11564:6:6","type":""},{"name":"size","nodeType":"YulTypedName","src":"11572:4:6","type":""}],"src":"11535:281:6"},{"body":{"nodeType":"YulBlock","src":"11856:142:6","statements":[{"nodeType":"YulAssignment","src":"11866:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11889:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11871:17:6"},"nodeType":"YulFunctionCall","src":"11871:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"11866:1:6"}]},{"nodeType":"YulAssignment","src":"11900:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11923:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11905:17:6"},"nodeType":"YulFunctionCall","src":"11905:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"11900:1:6"}]},{"body":{"nodeType":"YulBlock","src":"11947:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"11949:16:6"},"nodeType":"YulFunctionCall","src":"11949:18:6"},"nodeType":"YulExpressionStatement","src":"11949:18:6"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11944:1:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11937:6:6"},"nodeType":"YulFunctionCall","src":"11937:9:6"},"nodeType":"YulIf","src":"11934:2:6"},{"nodeType":"YulAssignment","src":"11978:14:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11987:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"11990:1:6"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"11983:3:6"},"nodeType":"YulFunctionCall","src":"11983:9:6"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"11978:1:6"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11845:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"11848:1:6","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"11854:1:6","type":""}],"src":"11822:176:6"},{"body":{"nodeType":"YulBlock","src":"12032:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12049:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12052:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12042:6:6"},"nodeType":"YulFunctionCall","src":"12042:88:6"},"nodeType":"YulExpressionStatement","src":"12042:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12146:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12149:4:6","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12139:6:6"},"nodeType":"YulFunctionCall","src":"12139:15:6"},"nodeType":"YulExpressionStatement","src":"12139:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12170:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12173:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12163:6:6"},"nodeType":"YulFunctionCall","src":"12163:15:6"},"nodeType":"YulExpressionStatement","src":"12163:15:6"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"12004:180:6"},{"body":{"nodeType":"YulBlock","src":"12218:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12235:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12238:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12228:6:6"},"nodeType":"YulFunctionCall","src":"12228:88:6"},"nodeType":"YulExpressionStatement","src":"12228:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12332:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12335:4:6","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12325:6:6"},"nodeType":"YulFunctionCall","src":"12325:15:6"},"nodeType":"YulExpressionStatement","src":"12325:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12356:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12359:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12349:6:6"},"nodeType":"YulFunctionCall","src":"12349:15:6"},"nodeType":"YulExpressionStatement","src":"12349:15:6"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"12190:180:6"},{"body":{"nodeType":"YulBlock","src":"12404:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12421:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12424:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12414:6:6"},"nodeType":"YulFunctionCall","src":"12414:88:6"},"nodeType":"YulExpressionStatement","src":"12414:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12518:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12521:4:6","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12511:6:6"},"nodeType":"YulFunctionCall","src":"12511:15:6"},"nodeType":"YulExpressionStatement","src":"12511:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12542:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12545:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12535:6:6"},"nodeType":"YulFunctionCall","src":"12535:15:6"},"nodeType":"YulExpressionStatement","src":"12535:15:6"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"12376:180:6"},{"body":{"nodeType":"YulBlock","src":"12590:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12607:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12610:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12600:6:6"},"nodeType":"YulFunctionCall","src":"12600:88:6"},"nodeType":"YulExpressionStatement","src":"12600:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12704:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12707:4:6","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12697:6:6"},"nodeType":"YulFunctionCall","src":"12697:15:6"},"nodeType":"YulExpressionStatement","src":"12697:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12728:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12731:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12721:6:6"},"nodeType":"YulFunctionCall","src":"12721:15:6"},"nodeType":"YulExpressionStatement","src":"12721:15:6"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"12562:180:6"},{"body":{"nodeType":"YulBlock","src":"12796:54:6","statements":[{"nodeType":"YulAssignment","src":"12806:38:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12824:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"12831:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12820:3:6"},"nodeType":"YulFunctionCall","src":"12820:14:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12840:2:6","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12836:3:6"},"nodeType":"YulFunctionCall","src":"12836:7:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12816:3:6"},"nodeType":"YulFunctionCall","src":"12816:28:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12806:6:6"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12779:5:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"12789:6:6","type":""}],"src":"12748:102:6"},{"body":{"nodeType":"YulBlock","src":"12962:8:6","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12954:6:6","type":""}],"src":"12856:114:6"},{"body":{"nodeType":"YulBlock","src":"13035:62:6","statements":[{"body":{"nodeType":"YulBlock","src":"13069:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"13071:16:6"},"nodeType":"YulFunctionCall","src":"13071:18:6"},"nodeType":"YulExpressionStatement","src":"13071:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13058:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"13065:1:6","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13055:2:6"},"nodeType":"YulFunctionCall","src":"13055:12:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13048:6:6"},"nodeType":"YulFunctionCall","src":"13048:20:6"},"nodeType":"YulIf","src":"13045:2:6"}]},"name":"validator_assert_t_enum$_LotteryState_$229","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13028:5:6","type":""}],"src":"12976:121:6"},{"body":{"nodeType":"YulBlock","src":"13146:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"13203:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13212:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13215:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13205:6:6"},"nodeType":"YulFunctionCall","src":"13205:12:6"},"nodeType":"YulExpressionStatement","src":"13205:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13169:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13194:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13176:17:6"},"nodeType":"YulFunctionCall","src":"13176:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13166:2:6"},"nodeType":"YulFunctionCall","src":"13166:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13159:6:6"},"nodeType":"YulFunctionCall","src":"13159:43:6"},"nodeType":"YulIf","src":"13156:2:6"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13139:5:6","type":""}],"src":"13103:122:6"}]},"contents":"{\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert(0, 0)\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert(0, 0) }\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_enum$_LotteryState_$229_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_LotteryState_$229_to_t_uint8(value))\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_encode_tuple_t_enum$_LotteryState_$229__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_enum$_LotteryState_$229_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_enum$_LotteryState_$229(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_LotteryState_$229(value)\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function convert_t_enum$_LotteryState_$229_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_LotteryState_$229(value)\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function validator_assert_t_enum$_LotteryState_$229(value) {\n        if iszero(lt(value, 2)) { panic_error_0x21() }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"164":[{"length":32,"start":622},{"length":32,"start":706}],"231":[{"length":32,"start":584},{"length":32,"start":1735}],"237":[{"length":32,"start":980}],"239":[{"length":32,"start":1040}],"244":[{"length":32,"start":1108}],"249":[{"length":32,"start":1073}],"258":[{"length":32,"start":1528},{"length":32,"start":1697}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x91 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6B68C03C GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x6B68C03C EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x91AD27B4 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0xC1AF5785 EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0xE55AE4E8 EQ PUSH2 0x207 JUMPI PUSH2 0x91 JUMP JUMPDEST DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0xEA JUMPI DUP1 PUSH4 0x473F1DDC EQ PUSH2 0x113 JUMPI DUP1 PUSH4 0x565429DE EQ PUSH2 0x13E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x244 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0xE64 JUMP JUMPDEST PUSH2 0x26C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x111 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10C SWAP2 SWAP1 PUSH2 0xD8C JUMP JUMPDEST PUSH2 0x32C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x128 PUSH2 0x51C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x135 SWAP2 SWAP1 PUSH2 0xFA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x153 PUSH2 0x546 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 SWAP2 SWAP1 PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17E PUSH2 0x552 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18B SWAP2 SWAP1 PUSH2 0x1068 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B6 SWAP2 SWAP1 PUSH2 0xDD1 JUMP JUMPDEST PUSH2 0x569 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C9 SWAP3 SWAP2 SWAP1 PUSH2 0xFE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E7 PUSH2 0x69D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F4 SWAP2 SWAP1 PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x205 PUSH2 0x6C5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x229 SWAP2 SWAP1 PUSH2 0xE12 JUMP JUMPDEST PUSH2 0x83D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23B SWAP2 SWAP1 PUSH2 0xFA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x31E JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x315 SWAP3 SWAP2 SWAP1 PUSH2 0xFBC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x328 DUP3 DUP3 PUSH2 0x8AA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x346 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x569 JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x380 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3E754E5000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x3CB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x495 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1015 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E7 SWAP2 SWAP1 PUSH2 0xE3B JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xEDDABA8A57DCFD3A637AC76EDEA7AF81443028E0BD6E6CB23BD210A4A85BA856 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5B7 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5F1 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x2 SLOAD TIMESTAMP PUSH2 0x625 SWAP2 SWAP1 PUSH2 0x1147 JUMP JUMPDEST GT SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 POP GT SWAP1 POP PUSH1 0x0 DUP1 SELFBALANCE GT SWAP1 POP DUP3 DUP1 ISZERO PUSH2 0x645 JUMPI POP DUP4 JUMPDEST DUP1 ISZERO PUSH2 0x64E JUMPI POP DUP1 JUMPDEST DUP1 ISZERO PUSH2 0x657 JUMPI POP DUP2 JUMPDEST SWAP6 POP DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3078300000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP6 POP SWAP6 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x71F JUMPI PUSH1 0x40 MLOAD PUSH32 0xF3F9345600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x759 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x7A1 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ PUSH2 0x7D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4FF3426E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x878 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8EB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x8FD SWAP2 SWAP1 PUSH2 0x1297 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x93A JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x9FB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA41 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA6F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0xA85 SWAP3 SWAP2 SWAP1 PUSH2 0xB73 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0xAAC SWAP1 PUSH2 0xF8C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xAE9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAEE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xB29 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF3F9345600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x794919B0F484B8E90B1B817AC7F880F846FBD8A9813DEE2A378E820DB094E3D1 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xBEC JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xBEB JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xB93 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xBF9 SWAP2 SWAP1 PUSH2 0xBFD JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xC16 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xBFE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC2D PUSH2 0xC28 DUP5 PUSH2 0x10C3 JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0xC4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xC7C JUMPI DUP2 PUSH2 0xC62 DUP9 DUP3 PUSH2 0xD62 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xC4F JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC99 PUSH2 0xC94 DUP5 PUSH2 0x10EF JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xCB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCBC DUP5 DUP3 DUP6 PUSH2 0x1224 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCE5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xC1A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xD00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xD31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD59 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xC86 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD71 DUP2 PUSH2 0x13AC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD86 DUP2 PUSH2 0x13AC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC5 DUP6 DUP3 DUP7 ADD PUSH2 0xCEE JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE09 DUP5 DUP3 DUP6 ADD PUSH2 0xD38 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE32 DUP5 DUP3 DUP6 ADD PUSH2 0xD62 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE5B DUP5 DUP3 DUP6 ADD PUSH2 0xD77 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE85 DUP6 DUP3 DUP7 ADD PUSH2 0xD62 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEAE DUP6 DUP3 DUP7 ADD PUSH2 0xCC4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xEC1 DUP2 PUSH2 0x117B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xED0 DUP2 PUSH2 0x118D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xEDF DUP2 PUSH2 0x1199 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEF0 DUP3 PUSH2 0x1120 JUMP JUMPDEST PUSH2 0xEFA DUP2 DUP6 PUSH2 0x112B JUMP JUMPDEST SWAP4 POP PUSH2 0xF0A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1233 JUMP JUMPDEST PUSH2 0xF13 DUP2 PUSH2 0x1384 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xF27 DUP2 PUSH2 0x1212 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF3A PUSH1 0x0 DUP4 PUSH2 0x113C JUMP JUMPDEST SWAP2 POP PUSH2 0xF45 DUP3 PUSH2 0x1395 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF59 DUP2 PUSH2 0x11B6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xF68 DUP2 PUSH2 0x11E4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xF77 DUP2 PUSH2 0x11EE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xF86 DUP2 PUSH2 0x11FE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF97 DUP3 PUSH2 0xF2D JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFB6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xEB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xFD1 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xEB8 JUMP JUMPDEST PUSH2 0xFDE PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xEB8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xFFA PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xEC7 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x100C DUP2 DUP5 PUSH2 0xEE5 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x102A PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xED6 JUMP JUMPDEST PUSH2 0x1037 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xF7D JUMP JUMPDEST PUSH2 0x1044 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xF50 JUMP JUMPDEST PUSH2 0x1051 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xF6E JUMP JUMPDEST PUSH2 0x105E PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xF6E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x107D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF1E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1098 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF5F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10A8 PUSH2 0x10B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x10B4 DUP3 DUP3 PUSH2 0x1266 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x10DE JUMPI PUSH2 0x10DD PUSH2 0x1355 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x110A JUMPI PUSH2 0x1109 PUSH2 0x1355 JUMP JUMPDEST JUMPDEST PUSH2 0x1113 DUP3 PUSH2 0x1384 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1152 DUP3 PUSH2 0x11E4 JUMP JUMPDEST SWAP2 POP PUSH2 0x115D DUP4 PUSH2 0x11E4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1170 JUMPI PUSH2 0x116F PUSH2 0x12C8 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1186 DUP3 PUSH2 0x11C4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x11B1 DUP3 PUSH2 0x1398 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x121D DUP3 PUSH2 0x11A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1251 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1236 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1260 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x126F DUP3 PUSH2 0x1384 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x128E JUMPI PUSH2 0x128D PUSH2 0x1355 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12A2 DUP3 PUSH2 0x11E4 JUMP JUMPDEST SWAP2 POP PUSH2 0x12AD DUP4 PUSH2 0x11E4 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x12BD JUMPI PUSH2 0x12BC PUSH2 0x12F7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x13A9 JUMPI PUSH2 0x13A8 PUSH2 0x1326 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x13B5 DUP2 PUSH2 0x11E4 JUMP JUMPDEST DUP2 EQ PUSH2 0x13C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD CODECOPY PUSH31 0x454E2433D2C4FD1F37F98AAFA94F53F599878EB1A5137ABCB308E11AE76473 PUSH16 0x6C634300080400330000000000000000 ","sourceMap":"610:5123:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5326:91;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6618:256:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3977:654:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5222:96;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5538:97;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5425:105;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3313:619;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;5643:87;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2389:362;;;:::i;:::-;;2809:104;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5326:91;5373:7;5399:10;5392:17;;5326:91;:::o;6618:256:4:-;6731:14;6717:28;;:10;:28;;;6713:109;;6788:10;6800:14;6762:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;3977:654:5:-;4181:17;4203:15;;;;;;;;;;;;;:11;:15::i;:::-;4180:38;;;4233:12;4229:45;;4255:17;;;;;;;;;;;;;;4229:45;4307:24;4290:14;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4340:17;4361:16;:35;;;4411:9;4435:16;1139:1;4502:18;1233:1;4361:201;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4340:222;;4613:9;4592:31;;;;;;;;;;3977:654;;;;:::o;5222:96::-;5270:7;5296:14;;;;;;;;;;;5289:21;;5222:96;:::o;5538:97::-;5585:7;5611:9;:16;;;;5604:23;;5538:97;:::o;5425:105::-;5472:12;5508:14;;;;;;;;;;;5501:21;;5425:105;:::o;3313:619::-;3460:17;3492:12;3550:11;3585:14;;;;;;;;;;;3564:35;;;;;;;;;;;;;;;;:17;:35;;;;;;;;;;;;;;;;;3550:49;;3610:15;3667:10;3648:15;;3630;:33;;;;:::i;:::-;3629:48;3610:68;;3689:15;3726:1;3707:9;:16;;;;:20;3689:38;;3738:15;3780:1;3756:21;:25;3738:43;;3808:10;:20;;;;;3822:6;3808:20;:34;;;;;3832:10;3808:34;:48;;;;;3846:10;3808:48;3792:65;;3876:12;3868:28;;;;;;;;;;;;;;;;;;;;;;;;;3313:619;;;:::o;5643:87::-;5686:7;5712:10;5705:17;;5643:87;:::o;2389:362::-;2578:10;2566:9;:22;2563:51;;;2598:14;;;;;;;;;;;;;;2563:51;2645:17;2627:35;;;;;;;;;;;;;;;;:14;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;2624:68;;2672:17;;;;;;;;;;;;;;2624:68;2702:9;2725:10;2702:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2389:362::o;2809:104::-;2863:7;2889:9;2899:5;2889:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2882:23;;2809:104;;;:::o;4639:575::-;4735:21;4776:9;:16;;;;4759:11;4771:1;4759:14;;;;;;;;;;;;;;;;;;;;;;:33;;;;:::i;:::-;4735:57;;4803:22;4828:9;4838:13;4828:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4803:49;;4880:6;4863:14;;:23;;;;;;;;;;;;;;;;;;4915:15;4897;:33;;;;4958:17;4941:14;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5020:1;4998:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4986:9;:36;;;;;;;;;;;;:::i;:::-;;5035:12;5053:6;:11;;5072:21;5053:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5034:64;;;5114:7;5110:61;;5144:14;;;;;;;;;;;;;;5110:61;5199:6;5186:20;;;;;;;;;;;;4639:575;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;24:655:6:-;120:5;145:81;161:64;218:6;161:64;:::i;:::-;145:81;:::i;:::-;136:90;;246:5;275:6;268:5;261:21;309:4;302:5;298:16;291:23;;335:6;385:3;377:4;369:6;365:17;360:3;356:27;353:36;350:2;;;414:1;411;404:12;350:2;450:1;435:238;460:6;457:1;454:13;435:238;;;528:3;557:37;590:3;578:10;557:37;:::i;:::-;552:3;545:50;624:4;619:3;615:14;608:21;;658:4;653:3;649:14;642:21;;495:178;482:1;479;475:9;470:14;;435:238;;;439:14;126:553;;;;;;;:::o;685:343::-;762:5;787:65;803:48;844:6;803:48;:::i;:::-;787:65;:::i;:::-;778:74;;875:6;868:5;861:21;913:4;906:5;902:16;951:3;942:6;937:3;933:16;930:25;927:2;;;968:1;965;958:12;927:2;981:41;1015:6;1010:3;1005;981:41;:::i;:::-;768:260;;;;;;:::o;1051:303::-;1122:5;1171:3;1164:4;1156:6;1152:17;1148:27;1138:2;;1189:1;1186;1179:12;1138:2;1229:6;1216:20;1254:94;1344:3;1336:6;1329:4;1321:6;1317:17;1254:94;:::i;:::-;1245:103;;1128:226;;;;;:::o;1373:351::-;1430:8;1440:6;1490:3;1483:4;1475:6;1471:17;1467:27;1457:2;;1508:1;1505;1498:12;1457:2;1544:6;1531:20;1521:30;;1574:18;1566:6;1563:30;1560:2;;;1606:1;1603;1596:12;1560:2;1643:4;1635:6;1631:17;1619:29;;1697:3;1689:4;1681:6;1677:17;1667:8;1663:32;1660:41;1657:2;;;1714:1;1711;1704:12;1657:2;1447:277;;;;;:::o;1743:271::-;1798:5;1847:3;1840:4;1832:6;1828:17;1824:27;1814:2;;1865:1;1862;1855:12;1814:2;1905:6;1892:20;1930:78;2004:3;1996:6;1989:4;1981:6;1977:17;1930:78;:::i;:::-;1921:87;;1804:210;;;;;:::o;2020:139::-;2066:5;2104:6;2091:20;2082:29;;2120:33;2147:5;2120:33;:::i;:::-;2072:87;;;;:::o;2165:143::-;2222:5;2253:6;2247:13;2238:22;;2269:33;2296:5;2269:33;:::i;:::-;2228:80;;;;:::o;2314:393::-;2384:6;2392;2441:2;2429:9;2420:7;2416:23;2412:32;2409:2;;;2457:1;2454;2447:12;2409:2;2528:1;2517:9;2513:17;2500:31;2558:18;2550:6;2547:30;2544:2;;;2590:1;2587;2580:12;2544:2;2626:64;2682:7;2673:6;2662:9;2658:22;2626:64;:::i;:::-;2608:82;;;;2471:229;2399:308;;;;;:::o;2713:373::-;2781:6;2830:2;2818:9;2809:7;2805:23;2801:32;2798:2;;;2846:1;2843;2836:12;2798:2;2917:1;2906:9;2902:17;2889:31;2947:18;2939:6;2936:30;2933:2;;;2979:1;2976;2969:12;2933:2;3007:62;3061:7;3052:6;3041:9;3037:22;3007:62;:::i;:::-;2997:72;;2860:219;2788:298;;;;:::o;3092:262::-;3151:6;3200:2;3188:9;3179:7;3175:23;3171:32;3168:2;;;3216:1;3213;3206:12;3168:2;3259:1;3284:53;3329:7;3320:6;3309:9;3305:22;3284:53;:::i;:::-;3274:63;;3230:117;3158:196;;;;:::o;3360:284::-;3430:6;3479:2;3467:9;3458:7;3454:23;3450:32;3447:2;;;3495:1;3492;3485:12;3447:2;3538:1;3563:64;3619:7;3610:6;3599:9;3595:22;3563:64;:::i;:::-;3553:74;;3509:128;3437:207;;;;:::o;3650:550::-;3743:6;3751;3800:2;3788:9;3779:7;3775:23;3771:32;3768:2;;;3816:1;3813;3806:12;3768:2;3859:1;3884:53;3929:7;3920:6;3909:9;3905:22;3884:53;:::i;:::-;3874:63;;3830:117;4014:2;4003:9;3999:18;3986:32;4045:18;4037:6;4034:30;4031:2;;;4077:1;4074;4067:12;4031:2;4105:78;4175:7;4166:6;4155:9;4151:22;4105:78;:::i;:::-;4095:88;;3957:236;3758:442;;;;;:::o;4206:118::-;4293:24;4311:5;4293:24;:::i;:::-;4288:3;4281:37;4271:53;;:::o;4330:109::-;4411:21;4426:5;4411:21;:::i;:::-;4406:3;4399:34;4389:50;;:::o;4445:118::-;4532:24;4550:5;4532:24;:::i;:::-;4527:3;4520:37;4510:53;;:::o;4569:360::-;4655:3;4683:38;4715:5;4683:38;:::i;:::-;4737:70;4800:6;4795:3;4737:70;:::i;:::-;4730:77;;4816:52;4861:6;4856:3;4849:4;4842:5;4838:16;4816:52;:::i;:::-;4893:29;4915:6;4893:29;:::i;:::-;4888:3;4884:39;4877:46;;4659:270;;;;;:::o;4935:159::-;5036:51;5081:5;5036:51;:::i;:::-;5031:3;5024:64;5014:80;;:::o;5100:398::-;5259:3;5280:83;5361:1;5356:3;5280:83;:::i;:::-;5273:90;;5372:93;5461:3;5372:93;:::i;:::-;5490:1;5485:3;5481:11;5474:18;;5263:235;;;:::o;5504:115::-;5589:23;5606:5;5589:23;:::i;:::-;5584:3;5577:36;5567:52;;:::o;5625:118::-;5712:24;5730:5;5712:24;:::i;:::-;5707:3;5700:37;5690:53;;:::o;5749:115::-;5834:23;5851:5;5834:23;:::i;:::-;5829:3;5822:36;5812:52;;:::o;5870:115::-;5955:23;5972:5;5955:23;:::i;:::-;5950:3;5943:36;5933:52;;:::o;5991:379::-;6175:3;6197:147;6340:3;6197:147;:::i;:::-;6190:154;;6361:3;6354:10;;6179:191;;;:::o;6376:222::-;6469:4;6507:2;6496:9;6492:18;6484:26;;6520:71;6588:1;6577:9;6573:17;6564:6;6520:71;:::i;:::-;6474:124;;;;:::o;6604:332::-;6725:4;6763:2;6752:9;6748:18;6740:26;;6776:71;6844:1;6833:9;6829:17;6820:6;6776:71;:::i;:::-;6857:72;6925:2;6914:9;6910:18;6901:6;6857:72;:::i;:::-;6730:206;;;;;:::o;6942:407::-;7075:4;7113:2;7102:9;7098:18;7090:26;;7126:65;7188:1;7177:9;7173:17;7164:6;7126:65;:::i;:::-;7238:9;7232:4;7228:20;7223:2;7212:9;7208:18;7201:48;7266:76;7337:4;7328:6;7266:76;:::i;:::-;7258:84;;7080:269;;;;;:::o;7355:648::-;7552:4;7590:3;7579:9;7575:19;7567:27;;7604:71;7672:1;7661:9;7657:17;7648:6;7604:71;:::i;:::-;7685:70;7751:2;7740:9;7736:18;7727:6;7685:70;:::i;:::-;7765;7831:2;7820:9;7816:18;7807:6;7765:70;:::i;:::-;7845;7911:2;7900:9;7896:18;7887:6;7845:70;:::i;:::-;7925:71;7991:3;7980:9;7976:19;7967:6;7925:71;:::i;:::-;7557:446;;;;;;;;:::o;8009:250::-;8116:4;8154:2;8143:9;8139:18;8131:26;;8167:85;8249:1;8238:9;8234:17;8225:6;8167:85;:::i;:::-;8121:138;;;;:::o;8265:222::-;8358:4;8396:2;8385:9;8381:18;8373:26;;8409:71;8477:1;8466:9;8462:17;8453:6;8409:71;:::i;:::-;8363:124;;;;:::o;8493:129::-;8527:6;8554:20;;:::i;:::-;8544:30;;8583:33;8611:4;8603:6;8583:33;:::i;:::-;8534:88;;;:::o;8628:75::-;8661:6;8694:2;8688:9;8678:19;;8668:35;:::o;8709:311::-;8786:4;8876:18;8868:6;8865:30;8862:2;;;8898:18;;:::i;:::-;8862:2;8948:4;8940:6;8936:17;8928:25;;9008:4;9002;8998:15;8990:23;;8791:229;;;:::o;9026:307::-;9087:4;9177:18;9169:6;9166:30;9163:2;;;9199:18;;:::i;:::-;9163:2;9237:29;9259:6;9237:29;:::i;:::-;9229:37;;9321:4;9315;9311:15;9303:23;;9092:241;;;:::o;9339:98::-;9390:6;9424:5;9418:12;9408:22;;9397:40;;;:::o;9443:168::-;9526:11;9560:6;9555:3;9548:19;9600:4;9595:3;9591:14;9576:29;;9538:73;;;;:::o;9617:147::-;9718:11;9755:3;9740:18;;9730:34;;;;:::o;9770:191::-;9810:4;9830:20;9848:1;9830:20;:::i;:::-;9825:25;;9864:20;9882:1;9864:20;:::i;:::-;9859:25;;9903:1;9900;9897:8;9894:2;;;9908:18;;:::i;:::-;9894:2;9953:1;9950;9946:9;9938:17;;9815:146;;;;:::o;9967:96::-;10004:7;10033:24;10051:5;10033:24;:::i;:::-;10022:35;;10012:51;;;:::o;10069:90::-;10103:7;10146:5;10139:13;10132:21;10121:32;;10111:48;;;:::o;10165:77::-;10202:7;10231:5;10220:16;;10210:32;;;:::o;10248:143::-;10301:7;10330:5;10319:16;;10336:49;10379:5;10336:49;:::i;:::-;10309:82;;;:::o;10397:89::-;10433:7;10473:6;10466:5;10462:18;10451:29;;10441:45;;;:::o;10492:126::-;10529:7;10569:42;10562:5;10558:54;10547:65;;10537:81;;;:::o;10624:77::-;10661:7;10690:5;10679:16;;10669:32;;;:::o;10707:93::-;10743:7;10783:10;10776:5;10772:22;10761:33;;10751:49;;;:::o;10806:101::-;10842:7;10882:18;10875:5;10871:30;10860:41;;10850:57;;;:::o;10913:143::-;10977:9;11010:40;11044:5;11010:40;:::i;:::-;10997:53;;10987:69;;;:::o;11062:154::-;11146:6;11141:3;11136;11123:30;11208:1;11199:6;11194:3;11190:16;11183:27;11113:103;;;:::o;11222:307::-;11290:1;11300:113;11314:6;11311:1;11308:13;11300:113;;;11399:1;11394:3;11390:11;11384:18;11380:1;11375:3;11371:11;11364:39;11336:2;11333:1;11329:10;11324:15;;11300:113;;;11431:6;11428:1;11425:13;11422:2;;;11511:1;11502:6;11497:3;11493:16;11486:27;11422:2;11271:258;;;;:::o;11535:281::-;11618:27;11640:4;11618:27;:::i;:::-;11610:6;11606:40;11748:6;11736:10;11733:22;11712:18;11700:10;11697:34;11694:62;11691:2;;;11759:18;;:::i;:::-;11691:2;11799:10;11795:2;11788:22;11578:238;;;:::o;11822:176::-;11854:1;11871:20;11889:1;11871:20;:::i;:::-;11866:25;;11905:20;11923:1;11905:20;:::i;:::-;11900:25;;11944:1;11934:2;;11949:18;;:::i;:::-;11934:2;11990:1;11987;11983:9;11978:14;;11856:142;;;;:::o;12004:180::-;12052:77;12049:1;12042:88;12149:4;12146:1;12139:15;12173:4;12170:1;12163:15;12190:180;12238:77;12235:1;12228:88;12335:4;12332:1;12325:15;12359:4;12356:1;12349:15;12376:180;12424:77;12421:1;12414:88;12521:4;12518:1;12511:15;12545:4;12542:1;12535:15;12562:180;12610:77;12607:1;12600:88;12707:4;12704:1;12697:15;12731:4;12728:1;12721:15;12748:102;12789:6;12840:2;12836:7;12831:2;12824:5;12820:14;12816:28;12806:38;;12796:54;;;:::o;12856:114::-;12962:8;:::o;12976:121::-;13065:1;13058:5;13055:12;13045:2;;13071:18;;:::i;:::-;13045:2;13035:62;:::o;13103:122::-;13176:24;13194:5;13176:24;:::i;:::-;13169:5;13166:35;13156:2;;13215:1;13212;13205:12;13156:2;13146:79;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1022600","executionCost":"infinite","totalCost":"infinite"},"external":{"checkUpkeep(bytes)":"infinite","enterLottery()":"infinite","getEntranceFee()":"infinite","getInterval()":"infinite","getLotteryState()":"1318","getNumOfPlayers()":"1234","getPlayer(uint256)":"2455","getRecentWinner()":"1289","performUpkeep(bytes)":"infinite","rawFulfillRandomWords(uint256,uint256[])":"infinite"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","enterLottery()":"c1af5785","getEntranceFee()":"09bc33a7","getInterval()":"91ad27b4","getLotteryState()":"6b68c03c","getNumOfPlayers()":"565429de","getPlayer(uint256)":"e55ae4e8","getRecentWinner()":"473f1ddc","performUpkeep(bytes)":"4585e33b","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackgaslimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gaslane\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__notOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notEnoughFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"upKeepnotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lottery.sol\":\"lottery\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/lottery.sol\":{\"content\":\"//Raffle\\r\\n\\r\\n//enter lottry (paying some amount)\\r\\n//Pick a random number (verifiable)\\r\\n//completly automatic random number generates for winner\\r\\n//chinlink oracle -> randonmes, automated excution (Chainlink keeper)\\r\\n\\r\\n// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nerror notEnoughFee();\\r\\nerror Raffle__notOpen(); \\r\\nerror upKeepnotNeeded();\\r\\n\\r\\ncontract lottery is VRFConsumerBaseV2 , AutomationCompatibleInterface  {\\r\\n   \\r\\n    enum LotteryState{\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n    \\r\\n    \\r\\n    uint256 private immutable i_entrance;//entrance fee\\r\\n    //array to store players\\r\\n    address payable[] private s_players; //we have made players payable because we have to give them money when they win \\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gaslane;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private immutable i_callbackgaslimit;\\r\\n    uint32 private constant Num_words = 1;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    //keep track of state using enum\\r\\n\\r\\n    //lottery variables\\r\\n    address private s_recentWinner;\\r\\n    LotteryState private s_lotteryState;\\r\\n    uint256 private s_lastTImeStamp;\\r\\n    uint256 private immutable i_interval;\\r\\n    \\r\\n    \\r\\n    \\r\\n    //events\\r\\n    event LotteryEnter(address indexed player);\\r\\n    event RequestLotteryWinner(uint256 indexed requestId);\\r\\n    event winnerPicked(address indexed winner);\\r\\n    //contructor called each time contract is deployed (mostly once)\\r\\n    constructor(uint256 interval ,uint32 callbackgaslimit,uint64 subscriptionId,bytes32 gaslane,address vrfCoordinatorV2,uint256 entranceFee) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entrance = entranceFee;  \\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gaslane = gaslane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        s_lotteryState = LotteryState.OPEN; //0 means open\\r\\n        i_callbackgaslimit = callbackgaslimit;\\r\\n        s_lastTImeStamp =  block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }   \\r\\n\\r\\n    //function for the user to enter in the lottery\\r\\n    function enterLottery() public  payable{  \\r\\n        //while entering the lottery if somehow user fails to add value greater than entrance value error will be thrown\\r\\n        if(msg.value < i_entrance) {revert notEnoughFee();}\\r\\n        if(s_lotteryState != LotteryState.OPEN ){revert Raffle__notOpen(); }\\r\\n        s_players.push(payable(msg.sender));\\r\\n    \\r\\n    }\\r\\n\\r\\n    //function to get the player at given index \\r\\n    function getPlayer(uint256 index) public view returns(address){\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev This is the function that the Chainlink Keeper nodes call\\r\\n     * they look for `upkeepNeeded` to return True.\\r\\n     * the following should be true for this to return true:\\r\\n     * 1. The time interval has passed between raffle runs.\\r\\n     * 2. The lottery is open.\\r\\n     * 3. The contract has ETH.\\r\\n     * 4. Implicity, your subscription is funded with LINK.\\r\\n     */\\r\\n    function checkUpkeep(\\r\\n        bytes memory /* checkData */\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bool upkeepNeeded,\\r\\n            bytes memory /* performData */\\r\\n        )\\r\\n    {\\r\\n        bool isOpen = LotteryState.OPEN == s_lotteryState;\\r\\n        bool timePassed = ((block.timestamp - s_lastTImeStamp) > i_interval);\\r\\n        bool hasPlayers = s_players.length > 0;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\r\\n        return (upkeepNeeded, \\\"0x0\\\"); // can we comment this out?\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //external is cheaper\\r\\n    function performUpkeep(bytes calldata /*performData*/ )  external override {\\r\\n        //request random number and then do something to it, it involves two transactions and it is preffered\\r\\n      \\r\\n      (bool upKeepNeeded,) = checkUpkeep(\\\"\\\");\\r\\n\\r\\n      if(!upKeepNeeded){ revert upKeepnotNeeded();}\\r\\n      \\r\\n      s_lotteryState = LotteryState.CALCULATING;\\r\\n      uint256 requestId =  i_vrfCoordinator.requestRandomWords(\\r\\n            i_gaslane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackgaslimit,\\r\\n            Num_words\\r\\n               );\\r\\n            \\r\\n        emit RequestLotteryWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256 ,uint256[] memory randomwords) internal override {\\r\\n        uint256 indexOfWinner = randomwords[0] % s_players.length;\\r\\n        address payable winner = s_players[indexOfWinner];\\r\\n        s_recentWinner = winner;\\r\\n        s_lastTImeStamp = block.timestamp;\\r\\n        s_lotteryState = LotteryState.OPEN;\\r\\n        s_players = new address payable[](0);\\r\\n         (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\");\\r\\n         if(!success){\\r\\n            revert notEnoughFee();\\r\\n         }\\r\\n        emit winnerPicked(winner);\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address){\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256){\\r\\n        return i_entrance;\\r\\n    }\\r\\n\\r\\n    function getLotteryState() public view returns(LotteryState){\\r\\n    \\r\\n       return s_lotteryState;\\r\\n    }\\r\\n\\r\\n    function getNumOfPlayers() public view returns(uint256){\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns(uint256){\\r\\n        return i_interval;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8c2df3446b4bdbcc502a41acf8d82924aed754f62b79b87c75d961d1b42754a6\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}","storageLayout":{"storage":[{"astId":234,"contract":"contracts/lottery.sol:lottery","label":"s_players","offset":0,"slot":"0","type":"t_array(t_address_payable)dyn_storage"},{"astId":251,"contract":"contracts/lottery.sol:lottery","label":"s_recentWinner","offset":0,"slot":"1","type":"t_address"},{"astId":254,"contract":"contracts/lottery.sol:lottery","label":"s_lotteryState","offset":20,"slot":"1","type":"t_enum(LotteryState)229"},{"astId":256,"contract":"contracts/lottery.sol:lottery","label":"s_lastTImeStamp","offset":0,"slot":"2","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"},"t_enum(LotteryState)229":{"encoding":"inplace","label":"enum lottery.LotteryState","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}