{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_baseFee",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_gasPriceLink",
          "type": "uint96"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidConsumer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRandomWords",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSubscription",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "MustBeSubOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrant",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyConsumers",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "ConsumerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "ConsumerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputSeed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "payment",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "RandomWordsFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preSeed",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "minimumRequestConfirmations",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RandomWordsRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "SubscriptionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionFunded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_FEE",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAS_PRICE_LINK",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_CONSUMERS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "acceptSubscriptionOwnerTransfer",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "addConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "consumerIsAdded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createSubscription",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "fulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_words",
          "type": "uint256[]"
        }
      ],
      "name": "fulfillRandomWordsWithOverride",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "uint96",
          "name": "_amount",
          "type": "uint96"
        }
      ],
      "name": "fundSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "minimumRequestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "stalenessSeconds",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbackWeiPerUnitLink",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeConfig",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeLinkPPMTier1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeLinkPPMTier2",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeLinkPPMTier3",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeLinkPPMTier4",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeLinkPPMTier5",
          "type": "uint32"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier2",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier3",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier4",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier5",
          "type": "uint24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfig",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        }
      ],
      "name": "getSubscription",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "balance",
          "type": "uint96"
        },
        {
          "internalType": "uint64",
          "name": "reqCount",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "consumers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "pendingRequestExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "removeConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_minimumRequestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_numWords",
          "type": "uint32"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "requestSubscriptionOwnerTransfer",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ee6e64e21d8bbf1e5d90b8db6f7797f11e11577be5afe8ee3e685286c3ac633",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3022583",
    "logsBloom": "0x
    "blockHash": "0x39bf5db50fa5d67f49df558589373197e4cc5a3eafe082acb4d067809226809d",
    "transactionHash": "0x8ee6e64e21d8bbf1e5d90b8db6f7797f11e11577be5afe8ee3e685286c3ac633",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x8ee6e64e21d8bbf1e5d90b8db6f7797f11e11577be5afe8ee3e685286c3ac633",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x39bf5db50fa5d67f49df558589373197e4cc5a3eafe082acb4d067809226809d"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "3022583",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "1000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "071294709a4049626c8665bc1cfb6631",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_baseFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_gasPriceLink\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRandomWords\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSubscription\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MustBeSubOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyConsumers\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"ConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"ConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputSeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_FEE\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAS_PRICE_LINK\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CONSUMERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"consumerIsAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_words\",\"type\":\"uint256[]\"}],\"name\":\"fulfillRandomWordsWithOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"_amount\",\"type\":\"uint96\"}],\"name\":\"fundSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackWeiPerUnitLink\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"_subId\":\"- A unique subscription id.\"}},\"fulfillRandomWords(uint256,address)\":{\"details\":\"This mock uses a simplified formula for calculating payment amount and gas usage, and doesnot account for all edge cases handled in the real VRF coordinator. When making requestsagainst the real coordinator a small amount of additional LINK is required.\",\"params\":{\"_consumer\":\"the VRF randomness consumer to send the result to\",\"_requestId\":\"the request to fulfill\"}},\"fulfillRandomWordsWithOverride(uint256,address,uint256[])\":{\"params\":{\"_consumer\":\"the VRF randomness consumer to send the result to\",\"_requestId\":\"the request to fulfill\",\"_words\":\"user-provided random words\"}},\"fundSubscription(uint64,uint96)\":{\"params\":{\"_amount\":\"the amount to fund\",\"_subId\":\"the subscription to fund\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"fulfillRandomWords(uint256,address)\":{\"notice\":\"fulfillRandomWords fulfills the given request, sending the random words to the suppliedconsumer.\"},\"fulfillRandomWordsWithOverride(uint256,address,uint256[])\":{\"notice\":\"fulfillRandomWordsWithOverride allows the user to pass in their own random words.\"},\"fundSubscription(uint64,uint96)\":{\"notice\":\"fundSubscription allows funding a subscription with an arbitrary amount for testing.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"setConfig()\":{\"notice\":\"Sets the configuration of the vrfv2 mock coordinator\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\":\"VRFCoordinatorV2Mock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// A mock for testing code that relies on VRFCoordinatorV2.\\npragma solidity ^0.8.4;\\n\\nimport \\\"../shared/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"../interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"../vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"../shared/access/ConfirmedOwner.sol\\\";\\n\\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface, ConfirmedOwner {\\n  uint96 public immutable BASE_FEE;\\n  uint96 public immutable GAS_PRICE_LINK;\\n  uint16 public immutable MAX_CONSUMERS = 100;\\n\\n  error InvalidSubscription();\\n  error InsufficientBalance();\\n  error MustBeSubOwner(address owner);\\n  error TooManyConsumers();\\n  error InvalidConsumer();\\n  error InvalidRandomWords();\\n  error Reentrant();\\n\\n  event RandomWordsRequested(\\n    bytes32 indexed keyHash,\\n    uint256 requestId,\\n    uint256 preSeed,\\n    uint64 indexed subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords,\\n    address indexed sender\\n  );\\n  event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\\n  event SubscriptionCreated(uint64 indexed subId, address owner);\\n  event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\\n  event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\\n  event ConsumerAdded(uint64 indexed subId, address consumer);\\n  event ConsumerRemoved(uint64 indexed subId, address consumer);\\n  event ConfigSet();\\n\\n  struct Config {\\n    // Reentrancy protection.\\n    bool reentrancyLock;\\n  }\\n  Config private s_config;\\n  uint64 s_currentSubId;\\n  uint256 s_nextRequestId = 1;\\n  uint256 s_nextPreSeed = 100;\\n  struct Subscription {\\n    address owner;\\n    uint96 balance;\\n  }\\n  mapping(uint64 => Subscription) s_subscriptions; /* subId */ /* subscription */\\n  mapping(uint64 => address[]) s_consumers; /* subId */ /* consumers */\\n\\n  struct Request {\\n    uint64 subId;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n  }\\n  mapping(uint256 => Request) s_requests; /* requestId */ /* request */\\n\\n  constructor(uint96 _baseFee, uint96 _gasPriceLink) ConfirmedOwner(msg.sender) {\\n    BASE_FEE = _baseFee;\\n    GAS_PRICE_LINK = _gasPriceLink;\\n    setConfig();\\n  }\\n\\n  /**\\n   * @notice Sets the configuration of the vrfv2 mock coordinator\\n   */\\n  function setConfig() public onlyOwner {\\n    s_config = Config({reentrancyLock: false});\\n    emit ConfigSet();\\n  }\\n\\n  function consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\\n    address[] memory consumers = s_consumers[_subId];\\n    for (uint256 i = 0; i < consumers.length; i++) {\\n      if (consumers[i] == _consumer) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  modifier onlyValidConsumer(uint64 _subId, address _consumer) {\\n    if (!consumerIsAdded(_subId, _consumer)) {\\n      revert InvalidConsumer();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\\n   * @notice consumer.\\n   *\\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\\n   * @dev against the real coordinator a small amount of additional LINK is required.\\n   *\\n   * @param _requestId the request to fulfill\\n   * @param _consumer the VRF randomness consumer to send the result to\\n   */\\n  function fulfillRandomWords(uint256 _requestId, address _consumer) external nonReentrant {\\n    fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\\n   *\\n   * @param _requestId the request to fulfill\\n   * @param _consumer the VRF randomness consumer to send the result to\\n   * @param _words user-provided random words\\n   */\\n  function fulfillRandomWordsWithOverride(uint256 _requestId, address _consumer, uint256[] memory _words) public {\\n    uint256 startGas = gasleft();\\n    if (s_requests[_requestId].subId == 0) {\\n      revert(\\\"nonexistent request\\\");\\n    }\\n    Request memory req = s_requests[_requestId];\\n\\n    if (_words.length == 0) {\\n      _words = new uint256[](req.numWords);\\n      for (uint256 i = 0; i < req.numWords; i++) {\\n        _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\\n      }\\n    } else if (_words.length != req.numWords) {\\n      revert InvalidRandomWords();\\n    }\\n\\n    VRFConsumerBaseV2 v;\\n    bytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\\n    s_config.reentrancyLock = true;\\n    (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\\n    s_config.reentrancyLock = false;\\n\\n    uint96 payment = uint96(BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK));\\n    if (s_subscriptions[req.subId].balance < payment) {\\n      revert InsufficientBalance();\\n    }\\n    s_subscriptions[req.subId].balance -= payment;\\n    delete (s_requests[_requestId]);\\n    emit RandomWordsFulfilled(_requestId, _requestId, payment, success);\\n  }\\n\\n  /**\\n   * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\\n   *\\n   * @param _subId the subscription to fund\\n   * @param _amount the amount to fund\\n   */\\n  function fundSubscription(uint64 _subId, uint96 _amount) public {\\n    if (s_subscriptions[_subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    uint96 oldBalance = s_subscriptions[_subId].balance;\\n    s_subscriptions[_subId].balance += _amount;\\n    emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\\n  }\\n\\n  function requestRandomWords(\\n    bytes32 _keyHash,\\n    uint64 _subId,\\n    uint16 _minimumRequestConfirmations,\\n    uint32 _callbackGasLimit,\\n    uint32 _numWords\\n  ) external override nonReentrant onlyValidConsumer(_subId, msg.sender) returns (uint256) {\\n    if (s_subscriptions[_subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n\\n    uint256 requestId = s_nextRequestId++;\\n    uint256 preSeed = s_nextPreSeed++;\\n\\n    s_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\\n\\n    emit RandomWordsRequested(\\n      _keyHash,\\n      requestId,\\n      preSeed,\\n      _subId,\\n      _minimumRequestConfirmations,\\n      _callbackGasLimit,\\n      _numWords,\\n      msg.sender\\n    );\\n    return requestId;\\n  }\\n\\n  function createSubscription() external override returns (uint64 _subId) {\\n    s_currentSubId++;\\n    s_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 0});\\n    emit SubscriptionCreated(s_currentSubId, msg.sender);\\n    return s_currentSubId;\\n  }\\n\\n  function getSubscription(\\n    uint64 _subId\\n  ) external view override returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers) {\\n    if (s_subscriptions[_subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    return (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\\n  }\\n\\n  function cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) nonReentrant {\\n    emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\\n    delete (s_subscriptions[_subId]);\\n  }\\n\\n  modifier onlySubOwner(uint64 _subId) {\\n    address owner = s_subscriptions[_subId].owner;\\n    if (owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    if (msg.sender != owner) {\\n      revert MustBeSubOwner(owner);\\n    }\\n    _;\\n  }\\n\\n  function getRequestConfig() external pure override returns (uint16, uint32, bytes32[] memory) {\\n    return (3, 2000000, new bytes32[](0));\\n  }\\n\\n  function addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\\n    if (s_consumers[_subId].length == MAX_CONSUMERS) {\\n      revert TooManyConsumers();\\n    }\\n\\n    if (consumerIsAdded(_subId, _consumer)) {\\n      return;\\n    }\\n\\n    s_consumers[_subId].push(_consumer);\\n    emit ConsumerAdded(_subId, _consumer);\\n  }\\n\\n  function removeConsumer(\\n    uint64 _subId,\\n    address _consumer\\n  ) external override onlySubOwner(_subId) onlyValidConsumer(_subId, _consumer) nonReentrant {\\n    address[] storage consumers = s_consumers[_subId];\\n    for (uint256 i = 0; i < consumers.length; i++) {\\n      if (consumers[i] == _consumer) {\\n        address last = consumers[consumers.length - 1];\\n        consumers[i] = last;\\n        consumers.pop();\\n        break;\\n      }\\n    }\\n\\n    emit ConsumerRemoved(_subId, _consumer);\\n  }\\n\\n  function getConfig()\\n    external\\n    pure\\n    returns (\\n      uint16 minimumRequestConfirmations,\\n      uint32 maxGasLimit,\\n      uint32 stalenessSeconds,\\n      uint32 gasAfterPaymentCalculation\\n    )\\n  {\\n    return (4, 2_500_000, 2_700, 33285);\\n  }\\n\\n  function getFeeConfig()\\n    external\\n    pure\\n    returns (\\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\\n      uint24 reqsForTier2,\\n      uint24 reqsForTier3,\\n      uint24 reqsForTier4,\\n      uint24 reqsForTier5\\n    )\\n  {\\n    return (\\n      100000, // 0.1 LINK\\n      100000, // 0.1 LINK\\n      100000, // 0.1 LINK\\n      100000, // 0.1 LINK\\n      100000, // 0.1 LINK\\n      0,\\n      0,\\n      0,\\n      0\\n    );\\n  }\\n\\n  modifier nonReentrant() {\\n    if (s_config.reentrancyLock) {\\n      revert Reentrant();\\n    }\\n    _;\\n  }\\n\\n  function getFallbackWeiPerUnitLink() external pure returns (int256) {\\n    return 4000000000000000; // 0.004 Ether\\n  }\\n\\n  function requestSubscriptionOwnerTransfer(uint64 /*_subId*/, address /*_newOwner*/) external pure override {\\n    revert(\\\"not implemented\\\");\\n  }\\n\\n  function acceptSubscriptionOwnerTransfer(uint64 /*_subId*/) external pure override {\\n    revert(\\\"not implemented\\\");\\n  }\\n\\n  function pendingRequestExists(uint64 /*subId*/) public pure override returns (bool) {\\n    revert(\\\"not implemented\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x6955686a8e9f2a6458adcf8c202b5ad82ec85540832b2eda27518449beb3b3a8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052606461ffff1660c09061ffff1660f01b815250600160045560646005553480156200002e57600080fd5b5060405162003a8038038062003a80833981810160405281019062000054919062000409565b338060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c190620004e1565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000151576200015081620001ba60201b60201c565b5b505050816bffffffffffffffffffffffff166080816bffffffffffffffffffffffff1660a01b81525050806bffffffffffffffffffffffff1660a0816bffffffffffffffffffffffff1660a01b81525050620001b2620002ea60201b60201c565b5050620005e3565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200022c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002239062000503565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b620002fa6200035f60201b60201c565b604051806020016040528060001515815250600260008201518160000160006101000a81548160ff0219169083151502179055509050507f4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be60405160405180910390a1565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620003f0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003e790620004bf565b60405180910390fd5b565b6000815190506200040381620005c9565b92915050565b600080604083850312156200041d57600080fd5b60006200042d85828601620003f2565b92505060206200044085828601620003f2565b9150509250929050565b60006200045960168362000525565b915062000466826200054e565b602082019050919050565b60006200048060188362000525565b91506200048d8262000577565b602082019050919050565b6000620004a760178362000525565b9150620004b482620005a0565b602082019050919050565b60006020820190508181036000830152620004da816200044a565b9050919050565b60006020820190508181036000830152620004fc8162000471565b9050919050565b600060208201905081810360008301526200051e8162000498565b9050919050565b600082825260208201905092915050565b60006bffffffffffffffffffffffff82169050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b620005d48162000536565b8114620005e057600080fd5b50565b60805160a01c60a05160a01c60c05160f01c61344f6200063160003960008181610e290152610f740152600081816108c70152611a1901526000818161090c0152610b1b015261344f6000f3fe608060405234801561001057600080fd5b50600436106101575760003560e01c80638b673e7a116100c3578063afc69b531161007c578063afc69b5314610375578063c3f909d414610391578063d7ae1d30146103b2578063e82ad7d4146103ce578063ed5eb06d146103fe578063f2fde38b1461042e57610157565b80638b673e7a146102c25780638da5cb5b146102cc5780639f87fad7146102ea578063a21a23e414610306578063a410347f14610324578063a47c76961461034257610157565b80635fbbc0d2116101155780635fbbc0d21461022057806364d51a2a146102465780637341c10c1461026457806379ba509714610280578063808974ff1461028a57806382359740146102a657610157565b80620122911461015c57806304c357cb1461017c57806308e3898e14610198578063356dac71146101b45780633d18651e146101d25780635d3b1d30146101f0575b600080fd5b61016461044a565b60405161017393929190612b61565b60405180910390f35b61019660048036038101906101919190612698565b6104d0565b005b6101b260048036038101906101ad9190612608565b61050b565b005b6101bc610b0a565b6040516101c99190612a8b565b60405180910390f35b6101da610b19565b6040516101e79190612d8a565b60405180910390f35b61020a60048036038101906102059190612555565b610b3d565b6040516102179190612be4565b60405180910390f35b610228610de8565b60405161023d99989796959493929190612ce2565b60405180910390f35b61024e610e27565b60405161025b9190612b46565b60405180910390f35b61027e60048036038101906102799190612698565b610e4b565b005b6102886110df565b005b6102a4600480360381019061029f91906125cc565b611274565b005b6102c060048036038101906102bb919061266f565b61133c565b005b6102ca611377565b005b6102d46113e4565b6040516102e19190612a2c565b60405180910390f35b61030460048036038101906102ff9190612698565b61140d565b005b61030e61185c565b60405161031b9190612d6f565b60405180910390f35b61032c611a17565b6040516103399190612d8a565b60405180910390f35b61035c6004803603810190610357919061266f565b611a3b565b60405161036c9493929190612da5565b60405180910390f35b61038f600480360381019061038a91906126d4565b611c41565b005b610399611e0c565b6040516103a99493929190612b9f565b60405180910390f35b6103cc60048036038101906103c79190612698565b611e2c565b005b6103e860048036038101906103e3919061266f565b612099565b6040516103f59190612a70565b60405180910390f35b61041860048036038101906104139190612698565b6120d6565b6040516104259190612a70565b60405180910390f35b6104486004803603810190610443919061252c565b612232565b005b60008060606003621e8480600067ffffffffffffffff811115610496577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104c45781602001602082028036833780820191505090505b50925092509250909192565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050290612ac6565b60405180910390fd5b60005a905060006008600086815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057f90612b06565b60405180910390fd5b6000600860008681526020019081526020016000206040518060600160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905060008351141561074c57806040015163ffffffff1667ffffffffffffffff81111561067c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156106aa5781602001602082028036833780820191505090505b50925060005b816040015163ffffffff168110156107465785816040516020016106d5929190612c2f565b6040516020818303038152906040528051906020012060001c848281518110610727577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061073e906131c2565b9150506106b0565b50610791565b806040015163ffffffff16835114610790576040517f3f3df5b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600080631fe543e360e01b87866040516024016107af929190612bff565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506001600260000160006101000a81548160ff02191690831515021790555060008673ffffffffffffffffffffffffffffffffffffffff16846020015163ffffffff168360405161085e9190612a15565b60006040518083038160008787f1925050503d806000811461089c576040519150601f19603f3d011682016040523d82523d6000602084013e6108a1565b606091505b505090506000600260000160006101000a81548160ff02191690831515021790555060007f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff165a87610900919061302f565b61090a9190612fd5565b7f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff166109439190612f3d565b9050806bffffffffffffffffffffffff1660066000876000015167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1610156109e1576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060066000876000015167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160148282829054906101000a90046bffffffffffffffffffffffff16610a369190613063565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550600860008a8152602001908152602001600020600080820160006101000a81549067ffffffffffffffff02191690556000820160086101000a81549063ffffffff021916905560008201600c6101000a81549063ffffffff02191690555050887f7dffc5ae5ee4e2e4df1651cf6ad329a73cebdb728f37ea0187b9b17e036756e48a8385604051610af793929190612cab565b60405180910390a2505050505050505050565b6000660e35fa931a0000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600260000160009054906101000a900460ff1615610b89576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8433610b9582826120d6565b610bcb576040517f71e8313700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c7c576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060046000815480929190610c91906131c2565b919050559050600060056000815480929190610cac906131c2565b91905055905060405180606001604052808a67ffffffffffffffff1681526020018863ffffffff1681526020018763ffffffff168152506008600084815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550604082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff168967ffffffffffffffff168b7f63373d1c4696214b898952999c9aaec57dac1ee2723cec59bea6888f489a977285858d8d8d604051610dd0959493929190612c58565b60405180910390a48194505050505095945050505050565b6000806000806000806000806000620186a080620186a080620186a0600080600080985098509850985098509850985098509850909192939495969798565b7f000000000000000000000000000000000000000000000000000000000000000081565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f02576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f7257806040517fd8a3fb52000000000000000000000000000000000000000000000000000000008152600401610f699190612a2c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000061ffff16600760008667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020805490501415610ffa576040517f05a48e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61100484846120d6565b1561100e576110d9565b600760008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508367ffffffffffffffff167f752ead9f4536ec1319ee3a5a604e1d65eded22e0924251552ba14ae4faa1bbc3846040516110d09190612a2c565b60405180910390a25b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461116f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116690612aa6565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600260000160009054906101000a900460ff16156112be576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113388282600067ffffffffffffffff811115611304577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156113325781602001602082028036833780820191505090505b5061050b565b5050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136e90612ac6565b60405180910390fd5b61137f612246565b604051806020016040528060001515815250600260008201518160000160006101000a81548160ff0219169083151502179055509050507f4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be60405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114c4576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461153457806040517fd8a3fb5200000000000000000000000000000000000000000000000000000000815260040161152b9190612a2c565b60405180910390fd5b838361154082826120d6565b611576576040517f71e8313700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260000160009054906101000a900460ff16156115c0576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008867ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020905060005b8180549050811015611810578673ffffffffffffffffffffffffffffffffffffffff1682828154811061164a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117fd57600082600184805490506116a5919061302f565b815481106116dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080838381548110611743577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828054806117c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550611810565b8080611808906131c2565b9150506115ee565b508667ffffffffffffffff167ff9bc9d5b5733d904409def43a5ecc888dbdac9a95687780d8fd489d3bb3813fc8760405161184b9190612a2c565b60405180910390a250505050505050565b60006003600081819054906101000a900467ffffffffffffffff16809291906118849061320b565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff1681525060066000600360009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050600360009054906101000a900467ffffffffffffffff1667ffffffffffffffff167f464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf336040516119f39190612a2c565b60405180910390a2600360009054906101000a900467ffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600660008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611af3576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166000600660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002080805480602002602001604051908101604052809291908181526020018280548015611c2b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611be1575b5050505050905093509350935093509193509193565b600073ffffffffffffffffffffffffffffffffffffffff16600660008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611cf2576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff16905081600660008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160148282829054906101000a90046bffffffffffffffffffffffff16611d8a9190612f93565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508267ffffffffffffffff167fd39ec07f4e209f627a4c427971473820dc129761ba28de8906bd56f57101d4f8828484611df19190612f93565b604051611dff929190612df1565b60405180910390a2505050565b6000806000806004622625a0610a8c618205935093509350935090919293565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ee3576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f5357806040517fd8a3fb52000000000000000000000000000000000000000000000000000000008152600401611f4a9190612a2c565b60405180910390fd5b600260000160009054906101000a900460ff1615611f9d576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8367ffffffffffffffff167fe8ed5b475a5b5987aa9165e8731bb78043f39eee32ec5a1169a89e27fcd4981584600660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff1660405161201b929190612a47565b60405180910390a2600660008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505050505050565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cd90612ac6565b60405180910390fd5b600080600760008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561218057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612136575b5050505050905060005b8151811015612225578373ffffffffffffffffffffffffffffffffffffffff168282815181106121e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156122125760019250505061222c565b808061221d906131c2565b91505061218a565b5060009150505b92915050565b61223a612246565b612243816122d6565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cb90612ae6565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233c90612b26565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600061241661241184612e3f565b612e1a565b9050808382526020820190508285602086028201111561243557600080fd5b60005b85811015612465578161244b88826124d8565b845260208401935060208301925050600181019050612438565b5050509392505050565b60008135905061247e81613378565b92915050565b600082601f83011261249557600080fd5b81356124a5848260208601612403565b91505092915050565b6000813590506124bd8161338f565b92915050565b6000813590506124d2816133a6565b92915050565b6000813590506124e7816133bd565b92915050565b6000813590506124fc816133d4565b92915050565b600081359050612511816133eb565b92915050565b60008135905061252681613402565b92915050565b60006020828403121561253e57600080fd5b600061254c8482850161246f565b91505092915050565b600080600080600060a0868803121561256d57600080fd5b600061257b888289016124ae565b955050602061258c88828901612502565b945050604061259d888289016124c3565b93505060606125ae888289016124ed565b92505060806125bf888289016124ed565b9150509295509295909350565b600080604083850312156125df57600080fd5b60006125ed858286016124d8565b92505060206125fe8582860161246f565b9150509250929050565b60008060006060848603121561261d57600080fd5b600061262b868287016124d8565b935050602061263c8682870161246f565b925050604084013567ffffffffffffffff81111561265957600080fd5b61266586828701612484565b9150509250925092565b60006020828403121561268157600080fd5b600061268f84828501612502565b91505092915050565b600080604083850312156126ab57600080fd5b60006126b985828601612502565b92505060206126ca8582860161246f565b9150509250929050565b600080604083850312156126e757600080fd5b60006126f585828601612502565b925050602061270685828601612517565b9150509250929050565b600061271c8383612758565b60208301905092915050565b6000612734838361289f565b60208301905092915050565b600061274c83836129bb565b60208301905092915050565b61276181613097565b82525050565b61277081613097565b82525050565b600061278182612e9b565b61278b8185612eee565b935061279683612e6b565b8060005b838110156127c75781516127ae8882612710565b97506127b983612ec7565b92505060018101905061279a565b5085935050505092915050565b60006127df82612ea6565b6127e98185612eff565b93506127f483612e7b565b8060005b8381101561282557815161280c8882612728565b975061281783612ed4565b9250506001810190506127f8565b5085935050505092915050565b600061283d82612eb1565b6128478185612f10565b935061285283612e8b565b8060005b8381101561288357815161286a8882612740565b975061287583612ee1565b925050600181019050612856565b5085935050505092915050565b612899816130a9565b82525050565b6128a8816130b5565b82525050565b60006128b982612ebc565b6128c38185612f21565b93506128d381856020860161315e565b80840191505092915050565b6128e8816130bf565b82525050565b60006128fb601683612f2c565b9150612906826132ab565b602082019050919050565b600061291e600f83612f2c565b9150612929826132d4565b602082019050919050565b6000612941601683612f2c565b915061294c826132fd565b602082019050919050565b6000612964601383612f2c565b915061296f82613326565b602082019050919050565b6000612987601783612f2c565b91506129928261334f565b602082019050919050565b6129a6816130c9565b82525050565b6129b5816130f7565b82525050565b6129c481613106565b82525050565b6129d381613106565b82525050565b6129e281613110565b82525050565b6129f181613120565b82525050565b612a008161314c565b82525050565b612a0f81613134565b82525050565b6000612a2182846128ae565b915081905092915050565b6000602082019050612a416000830184612767565b92915050565b6000604082019050612a5c6000830185612767565b612a6960208301846129f7565b9392505050565b6000602082019050612a856000830184612890565b92915050565b6000602082019050612aa060008301846128df565b92915050565b60006020820190508181036000830152612abf816128ee565b9050919050565b60006020820190508181036000830152612adf81612911565b9050919050565b60006020820190508181036000830152612aff81612934565b9050919050565b60006020820190508181036000830152612b1f81612957565b9050919050565b60006020820190508181036000830152612b3f8161297a565b9050919050565b6000602082019050612b5b600083018461299d565b92915050565b6000606082019050612b76600083018661299d565b612b8360208301856129d9565b8181036040830152612b9581846127d4565b9050949350505050565b6000608082019050612bb4600083018761299d565b612bc160208301866129d9565b612bce60408301856129d9565b612bdb60608301846129d9565b95945050505050565b6000602082019050612bf960008301846129ca565b92915050565b6000604082019050612c1460008301856129ca565b8181036020830152612c268184612832565b90509392505050565b6000604082019050612c4460008301856129ca565b612c5160208301846129ca565b9392505050565b600060a082019050612c6d60008301886129ca565b612c7a60208301876129ca565b612c87604083018661299d565b612c9460608301856129d9565b612ca160808301846129d9565b9695505050505050565b6000606082019050612cc060008301866129ca565b612ccd6020830185612a06565b612cda6040830184612890565b949350505050565b600061012082019050612cf8600083018c6129d9565b612d05602083018b6129d9565b612d12604083018a6129d9565b612d1f60608301896129d9565b612d2c60808301886129d9565b612d3960a08301876129ac565b612d4660c08301866129ac565b612d5360e08301856129ac565b612d616101008301846129ac565b9a9950505050505050505050565b6000602082019050612d8460008301846129e8565b92915050565b6000602082019050612d9f6000830184612a06565b92915050565b6000608082019050612dba6000830187612a06565b612dc760208301866129e8565b612dd46040830185612767565b8181036060830152612de68184612776565b905095945050505050565b6000604082019050612e0660008301856129f7565b612e1360208301846129f7565b9392505050565b6000612e24612e35565b9050612e308282613191565b919050565b6000604051905090565b600067ffffffffffffffff821115612e5a57612e5961326b565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612f4882613106565b9150612f5383613106565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f8857612f8761323c565b5b828201905092915050565b6000612f9e82613134565b9150612fa983613134565b9250826bffffffffffffffffffffffff03821115612fca57612fc961323c565b5b828201905092915050565b6000612fe082613106565b9150612feb83613106565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156130245761302361323c565b5b828202905092915050565b600061303a82613106565b915061304583613106565b9250828210156130585761305761323c565b5b828203905092915050565b600061306e82613134565b915061307983613134565b92508282101561308c5761308b61323c565b5b828203905092915050565b60006130a2826130d7565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b600061315782613134565b9050919050565b60005b8381101561317c578082015181840152602081019050613161565b8381111561318b576000848401525b50505050565b61319a8261329a565b810181811067ffffffffffffffff821117156131b9576131b861326b565b5b80604052505050565b60006131cd82613106565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613200576131ff61323c565b5b600182019050919050565b600061321682613120565b915067ffffffffffffffff8214156132315761323061323c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b7f6e6f7420696d706c656d656e7465640000000000000000000000000000000000600082015250565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b7f6e6f6e6578697374656e74207265717565737400000000000000000000000000600082015250565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b61338181613097565b811461338c57600080fd5b50565b613398816130b5565b81146133a357600080fd5b50565b6133af816130c9565b81146133ba57600080fd5b50565b6133c681613106565b81146133d157600080fd5b50565b6133dd81613110565b81146133e857600080fd5b50565b6133f481613120565b81146133ff57600080fd5b50565b61340b81613134565b811461341657600080fd5b5056fea2646970667358221220f7ef9fd0c1be94223fb6a078a31e7f2ce3737c96568bf5da065d639aa537bd3564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101575760003560e01c80638b673e7a116100c3578063afc69b531161007c578063afc69b5314610375578063c3f909d414610391578063d7ae1d30146103b2578063e82ad7d4146103ce578063ed5eb06d146103fe578063f2fde38b1461042e57610157565b80638b673e7a146102c25780638da5cb5b146102cc5780639f87fad7146102ea578063a21a23e414610306578063a410347f14610324578063a47c76961461034257610157565b80635fbbc0d2116101155780635fbbc0d21461022057806364d51a2a146102465780637341c10c1461026457806379ba509714610280578063808974ff1461028a57806382359740146102a657610157565b80620122911461015c57806304c357cb1461017c57806308e3898e14610198578063356dac71146101b45780633d18651e146101d25780635d3b1d30146101f0575b600080fd5b61016461044a565b60405161017393929190612b61565b60405180910390f35b61019660048036038101906101919190612698565b6104d0565b005b6101b260048036038101906101ad9190612608565b61050b565b005b6101bc610b0a565b6040516101c99190612a8b565b60405180910390f35b6101da610b19565b6040516101e79190612d8a565b60405180910390f35b61020a60048036038101906102059190612555565b610b3d565b6040516102179190612be4565b60405180910390f35b610228610de8565b60405161023d99989796959493929190612ce2565b60405180910390f35b61024e610e27565b60405161025b9190612b46565b60405180910390f35b61027e60048036038101906102799190612698565b610e4b565b005b6102886110df565b005b6102a4600480360381019061029f91906125cc565b611274565b005b6102c060048036038101906102bb919061266f565b61133c565b005b6102ca611377565b005b6102d46113e4565b6040516102e19190612a2c565b60405180910390f35b61030460048036038101906102ff9190612698565b61140d565b005b61030e61185c565b60405161031b9190612d6f565b60405180910390f35b61032c611a17565b6040516103399190612d8a565b60405180910390f35b61035c6004803603810190610357919061266f565b611a3b565b60405161036c9493929190612da5565b60405180910390f35b61038f600480360381019061038a91906126d4565b611c41565b005b610399611e0c565b6040516103a99493929190612b9f565b60405180910390f35b6103cc60048036038101906103c79190612698565b611e2c565b005b6103e860048036038101906103e3919061266f565b612099565b6040516103f59190612a70565b60405180910390f35b61041860048036038101906104139190612698565b6120d6565b6040516104259190612a70565b60405180910390f35b6104486004803603810190610443919061252c565b612232565b005b60008060606003621e8480600067ffffffffffffffff811115610496577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104c45781602001602082028036833780820191505090505b50925092509250909192565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050290612ac6565b60405180910390fd5b60005a905060006008600086815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057f90612b06565b60405180910390fd5b6000600860008681526020019081526020016000206040518060600160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905060008351141561074c57806040015163ffffffff1667ffffffffffffffff81111561067c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156106aa5781602001602082028036833780820191505090505b50925060005b816040015163ffffffff168110156107465785816040516020016106d5929190612c2f565b6040516020818303038152906040528051906020012060001c848281518110610727577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061073e906131c2565b9150506106b0565b50610791565b806040015163ffffffff16835114610790576040517f3f3df5b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600080631fe543e360e01b87866040516024016107af929190612bff565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506001600260000160006101000a81548160ff02191690831515021790555060008673ffffffffffffffffffffffffffffffffffffffff16846020015163ffffffff168360405161085e9190612a15565b60006040518083038160008787f1925050503d806000811461089c576040519150601f19603f3d011682016040523d82523d6000602084013e6108a1565b606091505b505090506000600260000160006101000a81548160ff02191690831515021790555060007f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff165a87610900919061302f565b61090a9190612fd5565b7f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff166109439190612f3d565b9050806bffffffffffffffffffffffff1660066000876000015167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1610156109e1576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060066000876000015167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160148282829054906101000a90046bffffffffffffffffffffffff16610a369190613063565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550600860008a8152602001908152602001600020600080820160006101000a81549067ffffffffffffffff02191690556000820160086101000a81549063ffffffff021916905560008201600c6101000a81549063ffffffff02191690555050887f7dffc5ae5ee4e2e4df1651cf6ad329a73cebdb728f37ea0187b9b17e036756e48a8385604051610af793929190612cab565b60405180910390a2505050505050505050565b6000660e35fa931a0000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600260000160009054906101000a900460ff1615610b89576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8433610b9582826120d6565b610bcb576040517f71e8313700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c7c576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060046000815480929190610c91906131c2565b919050559050600060056000815480929190610cac906131c2565b91905055905060405180606001604052808a67ffffffffffffffff1681526020018863ffffffff1681526020018763ffffffff168152506008600084815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550604082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff168967ffffffffffffffff168b7f63373d1c4696214b898952999c9aaec57dac1ee2723cec59bea6888f489a977285858d8d8d604051610dd0959493929190612c58565b60405180910390a48194505050505095945050505050565b6000806000806000806000806000620186a080620186a080620186a0600080600080985098509850985098509850985098509850909192939495969798565b7f000000000000000000000000000000000000000000000000000000000000000081565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f02576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f7257806040517fd8a3fb52000000000000000000000000000000000000000000000000000000008152600401610f699190612a2c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000061ffff16600760008667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020805490501415610ffa576040517f05a48e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61100484846120d6565b1561100e576110d9565b600760008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508367ffffffffffffffff167f752ead9f4536ec1319ee3a5a604e1d65eded22e0924251552ba14ae4faa1bbc3846040516110d09190612a2c565b60405180910390a25b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461116f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116690612aa6565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600260000160009054906101000a900460ff16156112be576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113388282600067ffffffffffffffff811115611304577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156113325781602001602082028036833780820191505090505b5061050b565b5050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136e90612ac6565b60405180910390fd5b61137f612246565b604051806020016040528060001515815250600260008201518160000160006101000a81548160ff0219169083151502179055509050507f4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be60405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114c4576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461153457806040517fd8a3fb5200000000000000000000000000000000000000000000000000000000815260040161152b9190612a2c565b60405180910390fd5b838361154082826120d6565b611576576040517f71e8313700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260000160009054906101000a900460ff16156115c0576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008867ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020905060005b8180549050811015611810578673ffffffffffffffffffffffffffffffffffffffff1682828154811061164a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117fd57600082600184805490506116a5919061302f565b815481106116dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080838381548110611743577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828054806117c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550611810565b8080611808906131c2565b9150506115ee565b508667ffffffffffffffff167ff9bc9d5b5733d904409def43a5ecc888dbdac9a95687780d8fd489d3bb3813fc8760405161184b9190612a2c565b60405180910390a250505050505050565b60006003600081819054906101000a900467ffffffffffffffff16809291906118849061320b565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff1681525060066000600360009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050600360009054906101000a900467ffffffffffffffff1667ffffffffffffffff167f464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf336040516119f39190612a2c565b60405180910390a2600360009054906101000a900467ffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600660008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611af3576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166000600660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002080805480602002602001604051908101604052809291908181526020018280548015611c2b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611be1575b5050505050905093509350935093509193509193565b600073ffffffffffffffffffffffffffffffffffffffff16600660008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611cf2576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff16905081600660008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160148282829054906101000a90046bffffffffffffffffffffffff16611d8a9190612f93565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508267ffffffffffffffff167fd39ec07f4e209f627a4c427971473820dc129761ba28de8906bd56f57101d4f8828484611df19190612f93565b604051611dff929190612df1565b60405180910390a2505050565b6000806000806004622625a0610a8c618205935093509350935090919293565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ee3576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f5357806040517fd8a3fb52000000000000000000000000000000000000000000000000000000008152600401611f4a9190612a2c565b60405180910390fd5b600260000160009054906101000a900460ff1615611f9d576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8367ffffffffffffffff167fe8ed5b475a5b5987aa9165e8731bb78043f39eee32ec5a1169a89e27fcd4981584600660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff1660405161201b929190612a47565b60405180910390a2600660008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505050505050565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cd90612ac6565b60405180910390fd5b600080600760008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561218057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612136575b5050505050905060005b8151811015612225578373ffffffffffffffffffffffffffffffffffffffff168282815181106121e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156122125760019250505061222c565b808061221d906131c2565b91505061218a565b5060009150505b92915050565b61223a612246565b612243816122d6565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cb90612ae6565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233c90612b26565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600061241661241184612e3f565b612e1a565b9050808382526020820190508285602086028201111561243557600080fd5b60005b85811015612465578161244b88826124d8565b845260208401935060208301925050600181019050612438565b5050509392505050565b60008135905061247e81613378565b92915050565b600082601f83011261249557600080fd5b81356124a5848260208601612403565b91505092915050565b6000813590506124bd8161338f565b92915050565b6000813590506124d2816133a6565b92915050565b6000813590506124e7816133bd565b92915050565b6000813590506124fc816133d4565b92915050565b600081359050612511816133eb565b92915050565b60008135905061252681613402565b92915050565b60006020828403121561253e57600080fd5b600061254c8482850161246f565b91505092915050565b600080600080600060a0868803121561256d57600080fd5b600061257b888289016124ae565b955050602061258c88828901612502565b945050604061259d888289016124c3565b93505060606125ae888289016124ed565b92505060806125bf888289016124ed565b9150509295509295909350565b600080604083850312156125df57600080fd5b60006125ed858286016124d8565b92505060206125fe8582860161246f565b9150509250929050565b60008060006060848603121561261d57600080fd5b600061262b868287016124d8565b935050602061263c8682870161246f565b925050604084013567ffffffffffffffff81111561265957600080fd5b61266586828701612484565b9150509250925092565b60006020828403121561268157600080fd5b600061268f84828501612502565b91505092915050565b600080604083850312156126ab57600080fd5b60006126b985828601612502565b92505060206126ca8582860161246f565b9150509250929050565b600080604083850312156126e757600080fd5b60006126f585828601612502565b925050602061270685828601612517565b9150509250929050565b600061271c8383612758565b60208301905092915050565b6000612734838361289f565b60208301905092915050565b600061274c83836129bb565b60208301905092915050565b61276181613097565b82525050565b61277081613097565b82525050565b600061278182612e9b565b61278b8185612eee565b935061279683612e6b565b8060005b838110156127c75781516127ae8882612710565b97506127b983612ec7565b92505060018101905061279a565b5085935050505092915050565b60006127df82612ea6565b6127e98185612eff565b93506127f483612e7b565b8060005b8381101561282557815161280c8882612728565b975061281783612ed4565b9250506001810190506127f8565b5085935050505092915050565b600061283d82612eb1565b6128478185612f10565b935061285283612e8b565b8060005b8381101561288357815161286a8882612740565b975061287583612ee1565b925050600181019050612856565b5085935050505092915050565b612899816130a9565b82525050565b6128a8816130b5565b82525050565b60006128b982612ebc565b6128c38185612f21565b93506128d381856020860161315e565b80840191505092915050565b6128e8816130bf565b82525050565b60006128fb601683612f2c565b9150612906826132ab565b602082019050919050565b600061291e600f83612f2c565b9150612929826132d4565b602082019050919050565b6000612941601683612f2c565b915061294c826132fd565b602082019050919050565b6000612964601383612f2c565b915061296f82613326565b602082019050919050565b6000612987601783612f2c565b91506129928261334f565b602082019050919050565b6129a6816130c9565b82525050565b6129b5816130f7565b82525050565b6129c481613106565b82525050565b6129d381613106565b82525050565b6129e281613110565b82525050565b6129f181613120565b82525050565b612a008161314c565b82525050565b612a0f81613134565b82525050565b6000612a2182846128ae565b915081905092915050565b6000602082019050612a416000830184612767565b92915050565b6000604082019050612a5c6000830185612767565b612a6960208301846129f7565b9392505050565b6000602082019050612a856000830184612890565b92915050565b6000602082019050612aa060008301846128df565b92915050565b60006020820190508181036000830152612abf816128ee565b9050919050565b60006020820190508181036000830152612adf81612911565b9050919050565b60006020820190508181036000830152612aff81612934565b9050919050565b60006020820190508181036000830152612b1f81612957565b9050919050565b60006020820190508181036000830152612b3f8161297a565b9050919050565b6000602082019050612b5b600083018461299d565b92915050565b6000606082019050612b76600083018661299d565b612b8360208301856129d9565b8181036040830152612b9581846127d4565b9050949350505050565b6000608082019050612bb4600083018761299d565b612bc160208301866129d9565b612bce60408301856129d9565b612bdb60608301846129d9565b95945050505050565b6000602082019050612bf960008301846129ca565b92915050565b6000604082019050612c1460008301856129ca565b8181036020830152612c268184612832565b90509392505050565b6000604082019050612c4460008301856129ca565b612c5160208301846129ca565b9392505050565b600060a082019050612c6d60008301886129ca565b612c7a60208301876129ca565b612c87604083018661299d565b612c9460608301856129d9565b612ca160808301846129d9565b9695505050505050565b6000606082019050612cc060008301866129ca565b612ccd6020830185612a06565b612cda6040830184612890565b949350505050565b600061012082019050612cf8600083018c6129d9565b612d05602083018b6129d9565b612d12604083018a6129d9565b612d1f60608301896129d9565b612d2c60808301886129d9565b612d3960a08301876129ac565b612d4660c08301866129ac565b612d5360e08301856129ac565b612d616101008301846129ac565b9a9950505050505050505050565b6000602082019050612d8460008301846129e8565b92915050565b6000602082019050612d9f6000830184612a06565b92915050565b6000608082019050612dba6000830187612a06565b612dc760208301866129e8565b612dd46040830185612767565b8181036060830152612de68184612776565b905095945050505050565b6000604082019050612e0660008301856129f7565b612e1360208301846129f7565b9392505050565b6000612e24612e35565b9050612e308282613191565b919050565b6000604051905090565b600067ffffffffffffffff821115612e5a57612e5961326b565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612f4882613106565b9150612f5383613106565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612f8857612f8761323c565b5b828201905092915050565b6000612f9e82613134565b9150612fa983613134565b9250826bffffffffffffffffffffffff03821115612fca57612fc961323c565b5b828201905092915050565b6000612fe082613106565b9150612feb83613106565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156130245761302361323c565b5b828202905092915050565b600061303a82613106565b915061304583613106565b9250828210156130585761305761323c565b5b828203905092915050565b600061306e82613134565b915061307983613134565b92508282101561308c5761308b61323c565b5b828203905092915050565b60006130a2826130d7565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b600061315782613134565b9050919050565b60005b8381101561317c578082015181840152602081019050613161565b8381111561318b576000848401525b50505050565b61319a8261329a565b810181811067ffffffffffffffff821117156131b9576131b861326b565b5b80604052505050565b60006131cd82613106565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613200576131ff61323c565b5b600182019050919050565b600061321682613120565b915067ffffffffffffffff8214156132315761323061323c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b7f6e6f7420696d706c656d656e7465640000000000000000000000000000000000600082015250565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b7f6e6f6e6578697374656e74207265717565737400000000000000000000000000600082015250565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b61338181613097565b811461338c57600080fd5b50565b613398816130b5565b81146133a357600080fd5b50565b6133af816130c9565b81146133ba57600080fd5b50565b6133c681613106565b81146133d157600080fd5b50565b6133dd81613110565b81146133e857600080fd5b50565b6133f481613120565b81146133ff57600080fd5b50565b61340b81613134565b811461341657600080fd5b5056fea2646970667358221220f7ef9fd0c1be94223fb6a078a31e7f2ce3737c96568bf5da065d639aa537bd3564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createSubscription()": {
        "details": "You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));",
        "returns": {
          "_subId": "- A unique subscription id."
        }
      },
      "fulfillRandomWords(uint256,address)": {
        "details": "This mock uses a simplified formula for calculating payment amount and gas usage, and doesnot account for all edge cases handled in the real VRF coordinator. When making requestsagainst the real coordinator a small amount of additional LINK is required.",
        "params": {
          "_consumer": "the VRF randomness consumer to send the result to",
          "_requestId": "the request to fulfill"
        }
      },
      "fulfillRandomWordsWithOverride(uint256,address,uint256[])": {
        "params": {
          "_consumer": "the VRF randomness consumer to send the result to",
          "_requestId": "the request to fulfill",
          "_words": "user-provided random words"
        }
      },
      "fundSubscription(uint64,uint96)": {
        "params": {
          "_amount": "the amount to fund",
          "_subId": "the subscription to fund"
        }
      },
      "getRequestConfig()": {
        "returns": {
          "_0": "minimumRequestConfirmations global min for request confirmations",
          "_1": "maxGasLimit global max for request gas limit",
          "_2": "s_provingKeyHashes list of registered key hashes"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "createSubscription()": {
        "notice": "Create a VRF subscription."
      },
      "fulfillRandomWords(uint256,address)": {
        "notice": "fulfillRandomWords fulfills the given request, sending the random words to the suppliedconsumer."
      },
      "fulfillRandomWordsWithOverride(uint256,address,uint256[])": {
        "notice": "fulfillRandomWordsWithOverride allows the user to pass in their own random words."
      },
      "fundSubscription(uint64,uint96)": {
        "notice": "fundSubscription allows funding a subscription with an arbitrary amount for testing."
      },
      "getRequestConfig()": {
        "notice": "Get configuration relevant for making requests"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "setConfig()": {
        "notice": "Sets the configuration of the vrfv2 mock coordinator"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1111,
        "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1113,
        "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 256,
        "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_config",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Config)253_storage"
      },
      {
        "astId": 258,
        "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_currentSubId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 261,
        "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_nextRequestId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 264,
        "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_nextPreSeed",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 274,
        "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_subscriptions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint64,t_struct(Subscription)269_storage)"
      },
      {
        "astId": 279,
        "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_consumers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint64,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 291,
        "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_requests",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Request)286_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Request)286_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VRFCoordinatorV2Mock.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)286_storage"
      },
      "t_mapping(t_uint64,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint64,t_struct(Subscription)269_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)269_storage"
      },
      "t_struct(Config)253_storage": {
        "encoding": "inplace",
        "label": "struct VRFCoordinatorV2Mock.Config",
        "members": [
          {
            "astId": 252,
            "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
            "label": "reentrancyLock",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Request)286_storage": {
        "encoding": "inplace",
        "label": "struct VRFCoordinatorV2Mock.Request",
        "members": [
          {
            "astId": 281,
            "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
            "label": "subId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 283,
            "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
            "label": "callbackGasLimit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 285,
            "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
            "label": "numWords",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Subscription)269_storage": {
        "encoding": "inplace",
        "label": "struct VRFCoordinatorV2Mock.Subscription",
        "members": [
          {
            "astId": 266,
            "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 268,
            "contract": "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
            "label": "balance",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}